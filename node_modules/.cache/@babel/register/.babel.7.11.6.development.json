{
  "{\"sourceRoot\":\"C:\\\\Users\\\\27682\\\\Desktop\\\\Local_Projects\\\\Quality_Assurance_and_Testing_with_Chai\\\\Projects\\\\boilerplate-project-sudoku-solver\\\\tests\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\27682\\\\Desktop\\\\Local_Projects\\\\Quality_Assurance_and_Testing_with_Chai\\\\Projects\\\\boilerplate-project-sudoku-solver\",\"filename\":\"C:\\\\Users\\\\27682\\\\Desktop\\\\Local_Projects\\\\Quality_Assurance_and_Testing_with_Chai\\\\Projects\\\\boilerplate-project-sudoku-solver\\\\tests\\\\1_unit-tests.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\27682\\\\Desktop\\\\Local_Projects\\\\Quality_Assurance_and_Testing_with_Chai\\\\Projects\\\\boilerplate-project-sudoku-solver\",\"plugins\":[{\"key\":\"proposal-numeric-separator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"NumericLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-logical-assignment-operators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.11.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\tests\\",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver",
      "filename": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\tests\\1_unit-tests.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-numeric-separator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "NumericLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-logical-assignment-operators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\tests\\1_unit-tests.js",
        "plugins": [
          "numericSeparator",
          "logicalAssignment",
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "exportNamespaceFrom",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\tests\\1_unit-tests.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\tests\\",
        "sourceFileName": "1_unit-tests.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar chai = require('chai');\n\nvar assert = chai.assert;\n\nvar chaiHttp = require('chai-http');\n\nvar server = require('../server');\n\nchai.use(chaiHttp);\n\nvar Solver = require('../controllers/sudoku-solver.js');\n\nvar solver;\nvar sudokuObject = new Solver();\nvar validInput = \"1.5..2.84..63.12.7.2..5.....9..1....8.2.3674.3.7.2..9.47...8..1..16....926914.37.\";\nsuite('Unit Tests', function () {\n  suite(\"Basic Assertions\", function () {\n    // Test 1.\n    test(\"Logic handles valid password of 81 characters\", function (done) {\n      var validOutput = \"135762984946381257728459613694517832812936745357824196473298561581673429269145378\";\n      var validBoard = sudokuObject.createBoard(validInput);\n      assert.equal(sudokuObject.solve(validBoard), validOutput);\n      done();\n    }); // Test 2.\n\n    test(\"Logic handles a puzzle string with invalid characters NOT (1-9 OR .) \", function (done) {\n      var invalidInput = \"1.5..2.84..63.12.7.2..5..g..9..1....8.2.3674.3.7.2..9.47...8..1..16....926914.37.\";\n      chai.request(server).post(\"/api/solve\").send({\n        \"puzzle\": invalidInput\n      }).end(function (err, res) {\n        assert.equal(res.status, 200);\n        assert.equal(res.body.error, \"Invalid characters in puzzle\");\n        done();\n      });\n    }); // Test 3.\n\n    test(\"Logic handles a puzzle that is not 81 characters in length\", function (done) {\n      var invalidLengthInput = \"1.5..2.84..63.12.7.2..5.......9..1....8.2.3674.3.7.2..9.47...8..1..16....926914.37.\";\n      chai.request(server).post(\"/api/solve\").send({\n        \"puzzle\": invalidLengthInput\n      }).end(function (err, res) {\n        assert.equal(res.status, 200);\n        assert.equal(res.body.error, \"Expected puzzle to be 81 characters long\");\n        done();\n      });\n    }); // Test 4.\n\n    test(\"Logic handles a valid row placement\", function (done) {\n      chai.request(server).post(\"/api/check\").send({\n        \"puzzle\": validInput,\n        \"coordinate\": \"A2\",\n        \"value\": \"9\"\n      }).end(function (err, res) {\n        assert.equal(res.status, 200);\n        assert.equal(res.body.valid, true);\n        done();\n      });\n    }); // Test 5.\n  });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIjFfdW5pdC10ZXN0cy5qcyJdLCJuYW1lcyI6WyJjaGFpIiwicmVxdWlyZSIsImFzc2VydCIsImNoYWlIdHRwIiwic2VydmVyIiwidXNlIiwiU29sdmVyIiwic29sdmVyIiwic3Vkb2t1T2JqZWN0IiwidmFsaWRJbnB1dCIsInN1aXRlIiwidGVzdCIsImRvbmUiLCJ2YWxpZE91dHB1dCIsInZhbGlkQm9hcmQiLCJjcmVhdGVCb2FyZCIsImVxdWFsIiwic29sdmUiLCJpbnZhbGlkSW5wdXQiLCJyZXF1ZXN0IiwicG9zdCIsInNlbmQiLCJlbmQiLCJlcnIiLCJyZXMiLCJzdGF0dXMiLCJib2R5IiwiZXJyb3IiLCJpbnZhbGlkTGVuZ3RoSW5wdXQiLCJ2YWxpZCJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFNQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLElBQU1DLE1BQU0sR0FBR0YsSUFBSSxDQUFDRSxNQUFwQjs7QUFDQSxJQUFNQyxRQUFRLEdBQUdGLE9BQU8sQ0FBQyxXQUFELENBQXhCOztBQUVBLElBQU1HLE1BQU0sR0FBR0gsT0FBTyxDQUFDLFdBQUQsQ0FBdEI7O0FBRUFELElBQUksQ0FBQ0ssR0FBTCxDQUFTRixRQUFUOztBQUVBLElBQU1HLE1BQU0sR0FBR0wsT0FBTyxDQUFDLGlDQUFELENBQXRCOztBQUNBLElBQUlNLE1BQUo7QUFDQSxJQUFNQyxZQUFZLEdBQUcsSUFBSUYsTUFBSixFQUFyQjtBQUNBLElBQU1HLFVBQVUsR0FBRyxtRkFBbkI7QUFDQUMsS0FBSyxDQUFDLFlBQUQsRUFBZSxZQUFNO0FBQ3RCQSxFQUFBQSxLQUFLLENBQUMsa0JBQUQsRUFBcUIsWUFBVTtBQUNoQztBQUNBQyxJQUFBQSxJQUFJLENBQUMsK0NBQUQsRUFBa0QsVUFBU0MsSUFBVCxFQUFjO0FBQ2hFLFVBQU1DLFdBQVcsR0FBRyxtRkFBcEI7QUFDQSxVQUFJQyxVQUFVLEdBQUdOLFlBQVksQ0FBQ08sV0FBYixDQUF5Qk4sVUFBekIsQ0FBakI7QUFDQVAsTUFBQUEsTUFBTSxDQUFDYyxLQUFQLENBQWFSLFlBQVksQ0FBQ1MsS0FBYixDQUFtQkgsVUFBbkIsQ0FBYixFQUE2Q0QsV0FBN0M7QUFDQUQsTUFBQUEsSUFBSTtBQUNQLEtBTEcsQ0FBSixDQUZnQyxDQVNoQzs7QUFDQUQsSUFBQUEsSUFBSSxDQUFDLHVFQUFELEVBQTBFLFVBQVNDLElBQVQsRUFBYztBQUN4RixVQUFNTSxZQUFZLEdBQUcsbUZBQXJCO0FBQ0FsQixNQUFBQSxJQUFJLENBQ0htQixPQURELENBQ1NmLE1BRFQsRUFFQ2dCLElBRkQsQ0FFTSxZQUZOLEVBR0NDLElBSEQsQ0FHTTtBQUFDLGtCQUFVSDtBQUFYLE9BSE4sRUFJQ0ksR0FKRCxDQUlLLFVBQVNDLEdBQVQsRUFBY0MsR0FBZCxFQUFrQjtBQUNuQnRCLFFBQUFBLE1BQU0sQ0FBQ2MsS0FBUCxDQUFhUSxHQUFHLENBQUNDLE1BQWpCLEVBQXlCLEdBQXpCO0FBQ0F2QixRQUFBQSxNQUFNLENBQUNjLEtBQVAsQ0FBYVEsR0FBRyxDQUFDRSxJQUFKLENBQVNDLEtBQXRCLEVBQTZCLDhCQUE3QjtBQUNBZixRQUFBQSxJQUFJO0FBQ1AsT0FSRDtBQVNILEtBWEcsQ0FBSixDQVZnQyxDQXVCaEM7O0FBQ0FELElBQUFBLElBQUksQ0FBQyw0REFBRCxFQUErRCxVQUFTQyxJQUFULEVBQWM7QUFDN0UsVUFBTWdCLGtCQUFrQixHQUFHLHFGQUEzQjtBQUNDNUIsTUFBQUEsSUFBSSxDQUNKbUIsT0FEQSxDQUNRZixNQURSLEVBRUFnQixJQUZBLENBRUssWUFGTCxFQUdBQyxJQUhBLENBR0s7QUFBQyxrQkFBVU87QUFBWCxPQUhMLEVBSUFOLEdBSkEsQ0FJSSxVQUFTQyxHQUFULEVBQWNDLEdBQWQsRUFBa0I7QUFDbkJ0QixRQUFBQSxNQUFNLENBQUNjLEtBQVAsQ0FBYVEsR0FBRyxDQUFDQyxNQUFqQixFQUF5QixHQUF6QjtBQUNBdkIsUUFBQUEsTUFBTSxDQUFDYyxLQUFQLENBQWFRLEdBQUcsQ0FBQ0UsSUFBSixDQUFTQyxLQUF0QixFQUE2QiwwQ0FBN0I7QUFDQWYsUUFBQUEsSUFBSTtBQUNQLE9BUkE7QUFTSixLQVhHLENBQUosQ0F4QmdDLENBcUNoQzs7QUFDQUQsSUFBQUEsSUFBSSxDQUFDLHFDQUFELEVBQXdDLFVBQVNDLElBQVQsRUFBYztBQUN0RFosTUFBQUEsSUFBSSxDQUNIbUIsT0FERCxDQUNTZixNQURULEVBRUNnQixJQUZELENBRU0sWUFGTixFQUdDQyxJQUhELENBR007QUFBQyxrQkFBVVosVUFBWDtBQUNGLHNCQUFjLElBRFo7QUFFRixpQkFBUztBQUZQLE9BSE4sRUFPQ2EsR0FQRCxDQU9LLFVBQVNDLEdBQVQsRUFBY0MsR0FBZCxFQUFrQjtBQUNuQnRCLFFBQUFBLE1BQU0sQ0FBQ2MsS0FBUCxDQUFhUSxHQUFHLENBQUNDLE1BQWpCLEVBQXlCLEdBQXpCO0FBQ0F2QixRQUFBQSxNQUFNLENBQUNjLEtBQVAsQ0FBYVEsR0FBRyxDQUFDRSxJQUFKLENBQVNHLEtBQXRCLEVBQTZCLElBQTdCO0FBQ0FqQixRQUFBQSxJQUFJO0FBQ1AsT0FYRDtBQVlILEtBYkcsQ0FBSixDQXRDZ0MsQ0FxRGhDO0FBRUgsR0F2REksQ0FBTDtBQXdESCxDQXpESSxDQUFMIiwic291cmNlUm9vdCI6IkM6XFxVc2Vyc1xcMjc2ODJcXERlc2t0b3BcXExvY2FsX1Byb2plY3RzXFxRdWFsaXR5X0Fzc3VyYW5jZV9hbmRfVGVzdGluZ193aXRoX0NoYWlcXFByb2plY3RzXFxib2lsZXJwbGF0ZS1wcm9qZWN0LXN1ZG9rdS1zb2x2ZXJcXHRlc3RzXFwiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjaGFpID0gcmVxdWlyZSgnY2hhaScpO1xuY29uc3QgYXNzZXJ0ID0gY2hhaS5hc3NlcnQ7XG5jb25zdCBjaGFpSHR0cCA9IHJlcXVpcmUoJ2NoYWktaHR0cCcpO1xuXG5jb25zdCBzZXJ2ZXIgPSByZXF1aXJlKCcuLi9zZXJ2ZXInKTtcblxuY2hhaS51c2UoY2hhaUh0dHApO1xuXG5jb25zdCBTb2x2ZXIgPSByZXF1aXJlKCcuLi9jb250cm9sbGVycy9zdWRva3Utc29sdmVyLmpzJyk7XG5sZXQgc29sdmVyO1xuY29uc3Qgc3Vkb2t1T2JqZWN0ID0gbmV3IFNvbHZlcigpO1xuY29uc3QgdmFsaWRJbnB1dCA9IFwiMS41Li4yLjg0Li42My4xMi43LjIuLjUuLi4uLjkuLjEuLi4uOC4yLjM2NzQuMy43LjIuLjkuNDcuLi44Li4xLi4xNi4uLi45MjY5MTQuMzcuXCI7IFxuc3VpdGUoJ1VuaXQgVGVzdHMnLCAoKSA9PiB7XG4gICAgc3VpdGUoXCJCYXNpYyBBc3NlcnRpb25zXCIsIGZ1bmN0aW9uKCl7XG4gICAgICAgIC8vIFRlc3QgMS5cbiAgICAgICAgdGVzdChcIkxvZ2ljIGhhbmRsZXMgdmFsaWQgcGFzc3dvcmQgb2YgODEgY2hhcmFjdGVyc1wiLCBmdW5jdGlvbihkb25lKXtcbiAgICAgICAgICAgIGNvbnN0IHZhbGlkT3V0cHV0ID0gXCIxMzU3NjI5ODQ5NDYzODEyNTc3Mjg0NTk2MTM2OTQ1MTc4MzI4MTI5MzY3NDUzNTc4MjQxOTY0NzMyOTg1NjE1ODE2NzM0MjkyNjkxNDUzNzhcIjtcbiAgICAgICAgICAgIGxldCB2YWxpZEJvYXJkID0gc3Vkb2t1T2JqZWN0LmNyZWF0ZUJvYXJkKHZhbGlkSW5wdXQpO1xuICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKHN1ZG9rdU9iamVjdC5zb2x2ZSh2YWxpZEJvYXJkKSwgdmFsaWRPdXRwdXQpO1xuICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBUZXN0IDIuXG4gICAgICAgIHRlc3QoXCJMb2dpYyBoYW5kbGVzIGEgcHV6emxlIHN0cmluZyB3aXRoIGludmFsaWQgY2hhcmFjdGVycyBOT1QgKDEtOSBPUiAuKSBcIiwgZnVuY3Rpb24oZG9uZSl7XG4gICAgICAgICAgICBjb25zdCBpbnZhbGlkSW5wdXQgPSBcIjEuNS4uMi44NC4uNjMuMTIuNy4yLi41Li5nLi45Li4xLi4uLjguMi4zNjc0LjMuNy4yLi45LjQ3Li4uOC4uMS4uMTYuLi4uOTI2OTE0LjM3LlwiO1xuICAgICAgICAgICAgY2hhaVxuICAgICAgICAgICAgLnJlcXVlc3Qoc2VydmVyKVxuICAgICAgICAgICAgLnBvc3QoXCIvYXBpL3NvbHZlXCIpXG4gICAgICAgICAgICAuc2VuZCh7XCJwdXp6bGVcIjogaW52YWxpZElucHV0fSlcbiAgICAgICAgICAgIC5lbmQoZnVuY3Rpb24oZXJyLCByZXMpe1xuICAgICAgICAgICAgICAgIGFzc2VydC5lcXVhbChyZXMuc3RhdHVzLCAyMDApO1xuICAgICAgICAgICAgICAgIGFzc2VydC5lcXVhbChyZXMuYm9keS5lcnJvciwgXCJJbnZhbGlkIGNoYXJhY3RlcnMgaW4gcHV6emxlXCIpO1xuICAgICAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBUZXN0IDMuXG4gICAgICAgIHRlc3QoXCJMb2dpYyBoYW5kbGVzIGEgcHV6emxlIHRoYXQgaXMgbm90IDgxIGNoYXJhY3RlcnMgaW4gbGVuZ3RoXCIsIGZ1bmN0aW9uKGRvbmUpe1xuICAgICAgICAgICAgY29uc3QgaW52YWxpZExlbmd0aElucHV0ID0gXCIxLjUuLjIuODQuLjYzLjEyLjcuMi4uNS4uLi4uLi45Li4xLi4uLjguMi4zNjc0LjMuNy4yLi45LjQ3Li4uOC4uMS4uMTYuLi4uOTI2OTE0LjM3LlwiO1xuICAgICAgICAgICAgIGNoYWlcbiAgICAgICAgICAgIC5yZXF1ZXN0KHNlcnZlcilcbiAgICAgICAgICAgIC5wb3N0KFwiL2FwaS9zb2x2ZVwiKVxuICAgICAgICAgICAgLnNlbmQoe1wicHV6emxlXCI6IGludmFsaWRMZW5ndGhJbnB1dH0pXG4gICAgICAgICAgICAuZW5kKGZ1bmN0aW9uKGVyciwgcmVzKXtcbiAgICAgICAgICAgICAgICBhc3NlcnQuZXF1YWwocmVzLnN0YXR1cywgMjAwKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQuZXF1YWwocmVzLmJvZHkuZXJyb3IsIFwiRXhwZWN0ZWQgcHV6emxlIHRvIGJlIDgxIGNoYXJhY3RlcnMgbG9uZ1wiKTtcbiAgICAgICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gVGVzdCA0LlxuICAgICAgICB0ZXN0KFwiTG9naWMgaGFuZGxlcyBhIHZhbGlkIHJvdyBwbGFjZW1lbnRcIiwgZnVuY3Rpb24oZG9uZSl7XG4gICAgICAgICAgICBjaGFpXG4gICAgICAgICAgICAucmVxdWVzdChzZXJ2ZXIpXG4gICAgICAgICAgICAucG9zdChcIi9hcGkvY2hlY2tcIilcbiAgICAgICAgICAgIC5zZW5kKHtcInB1enpsZVwiOiB2YWxpZElucHV0LFxuICAgICAgICAgICAgICAgIFwiY29vcmRpbmF0ZVwiOiBcIkEyXCIsXG4gICAgICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIjlcIlxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5lbmQoZnVuY3Rpb24oZXJyLCByZXMpe1xuICAgICAgICAgICAgICAgIGFzc2VydC5lcXVhbChyZXMuc3RhdHVzLCAyMDApO1xuICAgICAgICAgICAgICAgIGFzc2VydC5lcXVhbChyZXMuYm9keS52YWxpZCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pOyBcbiAgICAgICAgXG4gICAgICAgIC8vIFRlc3QgNS5cblxuICAgIH0pO1xufSk7XG4iXX0=",
    "map": {
      "version": 3,
      "sources": [
        "1_unit-tests.js"
      ],
      "names": [
        "chai",
        "require",
        "assert",
        "chaiHttp",
        "server",
        "use",
        "Solver",
        "solver",
        "sudokuObject",
        "validInput",
        "suite",
        "test",
        "done",
        "validOutput",
        "validBoard",
        "createBoard",
        "equal",
        "solve",
        "invalidInput",
        "request",
        "post",
        "send",
        "end",
        "err",
        "res",
        "status",
        "body",
        "error",
        "invalidLengthInput",
        "valid"
      ],
      "mappings": ";;AAAA,IAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMC,MAAM,GAAGF,IAAI,CAACE,MAApB;;AACA,IAAMC,QAAQ,GAAGF,OAAO,CAAC,WAAD,CAAxB;;AAEA,IAAMG,MAAM,GAAGH,OAAO,CAAC,WAAD,CAAtB;;AAEAD,IAAI,CAACK,GAAL,CAASF,QAAT;;AAEA,IAAMG,MAAM,GAAGL,OAAO,CAAC,iCAAD,CAAtB;;AACA,IAAIM,MAAJ;AACA,IAAMC,YAAY,GAAG,IAAIF,MAAJ,EAArB;AACA,IAAMG,UAAU,GAAG,mFAAnB;AACAC,KAAK,CAAC,YAAD,EAAe,YAAM;AACtBA,EAAAA,KAAK,CAAC,kBAAD,EAAqB,YAAU;AAChC;AACAC,IAAAA,IAAI,CAAC,+CAAD,EAAkD,UAASC,IAAT,EAAc;AAChE,UAAMC,WAAW,GAAG,mFAApB;AACA,UAAIC,UAAU,GAAGN,YAAY,CAACO,WAAb,CAAyBN,UAAzB,CAAjB;AACAP,MAAAA,MAAM,CAACc,KAAP,CAAaR,YAAY,CAACS,KAAb,CAAmBH,UAAnB,CAAb,EAA6CD,WAA7C;AACAD,MAAAA,IAAI;AACP,KALG,CAAJ,CAFgC,CAShC;;AACAD,IAAAA,IAAI,CAAC,uEAAD,EAA0E,UAASC,IAAT,EAAc;AACxF,UAAMM,YAAY,GAAG,mFAArB;AACAlB,MAAAA,IAAI,CACHmB,OADD,CACSf,MADT,EAECgB,IAFD,CAEM,YAFN,EAGCC,IAHD,CAGM;AAAC,kBAAUH;AAAX,OAHN,EAICI,GAJD,CAIK,UAASC,GAAT,EAAcC,GAAd,EAAkB;AACnBtB,QAAAA,MAAM,CAACc,KAAP,CAAaQ,GAAG,CAACC,MAAjB,EAAyB,GAAzB;AACAvB,QAAAA,MAAM,CAACc,KAAP,CAAaQ,GAAG,CAACE,IAAJ,CAASC,KAAtB,EAA6B,8BAA7B;AACAf,QAAAA,IAAI;AACP,OARD;AASH,KAXG,CAAJ,CAVgC,CAuBhC;;AACAD,IAAAA,IAAI,CAAC,4DAAD,EAA+D,UAASC,IAAT,EAAc;AAC7E,UAAMgB,kBAAkB,GAAG,qFAA3B;AACC5B,MAAAA,IAAI,CACJmB,OADA,CACQf,MADR,EAEAgB,IAFA,CAEK,YAFL,EAGAC,IAHA,CAGK;AAAC,kBAAUO;AAAX,OAHL,EAIAN,GAJA,CAII,UAASC,GAAT,EAAcC,GAAd,EAAkB;AACnBtB,QAAAA,MAAM,CAACc,KAAP,CAAaQ,GAAG,CAACC,MAAjB,EAAyB,GAAzB;AACAvB,QAAAA,MAAM,CAACc,KAAP,CAAaQ,GAAG,CAACE,IAAJ,CAASC,KAAtB,EAA6B,0CAA7B;AACAf,QAAAA,IAAI;AACP,OARA;AASJ,KAXG,CAAJ,CAxBgC,CAqChC;;AACAD,IAAAA,IAAI,CAAC,qCAAD,EAAwC,UAASC,IAAT,EAAc;AACtDZ,MAAAA,IAAI,CACHmB,OADD,CACSf,MADT,EAECgB,IAFD,CAEM,YAFN,EAGCC,IAHD,CAGM;AAAC,kBAAUZ,UAAX;AACF,sBAAc,IADZ;AAEF,iBAAS;AAFP,OAHN,EAOCa,GAPD,CAOK,UAASC,GAAT,EAAcC,GAAd,EAAkB;AACnBtB,QAAAA,MAAM,CAACc,KAAP,CAAaQ,GAAG,CAACC,MAAjB,EAAyB,GAAzB;AACAvB,QAAAA,MAAM,CAACc,KAAP,CAAaQ,GAAG,CAACE,IAAJ,CAASG,KAAtB,EAA6B,IAA7B;AACAjB,QAAAA,IAAI;AACP,OAXD;AAYH,KAbG,CAAJ,CAtCgC,CAqDhC;AAEH,GAvDI,CAAL;AAwDH,CAzDI,CAAL",
      "sourceRoot": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\tests\\",
      "sourcesContent": [
        "const chai = require('chai');\nconst assert = chai.assert;\nconst chaiHttp = require('chai-http');\n\nconst server = require('../server');\n\nchai.use(chaiHttp);\n\nconst Solver = require('../controllers/sudoku-solver.js');\nlet solver;\nconst sudokuObject = new Solver();\nconst validInput = \"1.5..2.84..63.12.7.2..5.....9..1....8.2.3674.3.7.2..9.47...8..1..16....926914.37.\"; \nsuite('Unit Tests', () => {\n    suite(\"Basic Assertions\", function(){\n        // Test 1.\n        test(\"Logic handles valid password of 81 characters\", function(done){\n            const validOutput = \"135762984946381257728459613694517832812936745357824196473298561581673429269145378\";\n            let validBoard = sudokuObject.createBoard(validInput);\n            assert.equal(sudokuObject.solve(validBoard), validOutput);\n            done();\n        });\n\n        // Test 2.\n        test(\"Logic handles a puzzle string with invalid characters NOT (1-9 OR .) \", function(done){\n            const invalidInput = \"1.5..2.84..63.12.7.2..5..g..9..1....8.2.3674.3.7.2..9.47...8..1..16....926914.37.\";\n            chai\n            .request(server)\n            .post(\"/api/solve\")\n            .send({\"puzzle\": invalidInput})\n            .end(function(err, res){\n                assert.equal(res.status, 200);\n                assert.equal(res.body.error, \"Invalid characters in puzzle\");\n                done();\n            });\n        });\n\n        // Test 3.\n        test(\"Logic handles a puzzle that is not 81 characters in length\", function(done){\n            const invalidLengthInput = \"1.5..2.84..63.12.7.2..5.......9..1....8.2.3674.3.7.2..9.47...8..1..16....926914.37.\";\n             chai\n            .request(server)\n            .post(\"/api/solve\")\n            .send({\"puzzle\": invalidLengthInput})\n            .end(function(err, res){\n                assert.equal(res.status, 200);\n                assert.equal(res.body.error, \"Expected puzzle to be 81 characters long\");\n                done();\n            });\n        });\n\n        // Test 4.\n        test(\"Logic handles a valid row placement\", function(done){\n            chai\n            .request(server)\n            .post(\"/api/check\")\n            .send({\"puzzle\": validInput,\n                \"coordinate\": \"A2\",\n                \"value\": \"9\"\n            })\n            .end(function(err, res){\n                assert.equal(res.status, 200);\n                assert.equal(res.body.valid, true);\n                done();\n            });\n        }); \n        \n        // Test 5.\n\n    });\n});\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1749154113076
  },
  "{\"sourceRoot\":\"C:\\\\Users\\\\27682\\\\Desktop\\\\Local_Projects\\\\Quality_Assurance_and_Testing_with_Chai\\\\Projects\\\\boilerplate-project-sudoku-solver\\\\controllers\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\27682\\\\Desktop\\\\Local_Projects\\\\Quality_Assurance_and_Testing_with_Chai\\\\Projects\\\\boilerplate-project-sudoku-solver\",\"filename\":\"C:\\\\Users\\\\27682\\\\Desktop\\\\Local_Projects\\\\Quality_Assurance_and_Testing_with_Chai\\\\Projects\\\\boilerplate-project-sudoku-solver\\\\controllers\\\\sudoku-solver.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\27682\\\\Desktop\\\\Local_Projects\\\\Quality_Assurance_and_Testing_with_Chai\\\\Projects\\\\boilerplate-project-sudoku-solver\",\"plugins\":[{\"key\":\"proposal-numeric-separator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"NumericLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-logical-assignment-operators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.11.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\controllers\\",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver",
      "filename": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\controllers\\sudoku-solver.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-numeric-separator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "NumericLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-logical-assignment-operators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\controllers\\sudoku-solver.js",
        "plugins": [
          "numericSeparator",
          "logicalAssignment",
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "exportNamespaceFrom",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\controllers\\sudoku-solver.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\controllers\\",
        "sourceFileName": "sudoku-solver.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar SudokuSolver = /*#__PURE__*/function () {\n  function SudokuSolver() {\n    _classCallCheck(this, SudokuSolver);\n  }\n\n  _createClass(SudokuSolver, [{\n    key: \"isSafe\",\n\n    /*\n    * isSafe function used to check if placement in a certain box\n    * is safe or not.  \n    */\n    value: function isSafe(puzzleString, row, column, value) {\n      // console.log('isSafe');\n      // Check row\n      for (var x = 0; x < 9; x++) {\n        if (puzzleString[row][x] === value) return false;\n      } // Check column\n\n\n      for (var _x = 0; _x < 9; _x++) {\n        if (puzzleString[_x][column] === value) return false;\n      } // Check 3x3 subgrid\n\n\n      var startRow = row - row % 3;\n      var startCol = column - column % 3;\n\n      for (var i = 0; i < 3; i++) {\n        for (var j = 0; j < 3; j++) {\n          if (puzzleString[i + startRow][j + startCol] === value) return false;\n        }\n      }\n\n      return true;\n    }\n    /**\n     * createBoard method takes a string and returns an array of the sudoku\n     * puzzle spread out.\n     * @param {*} puzzleString \n     * @returns board\n     */\n\n  }, {\n    key: \"createBoard\",\n    value: function createBoard(puzzleString) {\n      var board = [];\n      var index = 0;\n\n      for (var outerIndex = 0; outerIndex < 9; outerIndex++) {\n        var insideBoard = [];\n\n        for (var pushIndex = 0; pushIndex < 9; pushIndex++) {\n          if (puzzleString[index] == '.') {\n            insideBoard.push(puzzleString[index]);\n          } else {\n            insideBoard.push(parseInt(puzzleString[index]));\n          }\n\n          index++;\n        }\n\n        board.push(insideBoard);\n      }\n\n      return board;\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(puzzleString) {\n      var puzzleLength = puzzleString.length;\n\n      if (puzzleLength !== 81) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"checkRowPlacement\",\n    value: function checkRowPlacement(puzzleString, row, column, value) {\n      var Board = this.createBoard(puzzleString);\n      var clash = false; //  Loop through the columns to find clashes\n\n      for (var col = 0; col < 9; col++) {\n        if (col !== column) {\n          if (Board[row][col] === parseInt(value)) {\n            clash = true;\n            break;\n          }\n        }\n      }\n\n      return clash;\n    }\n  }, {\n    key: \"checkColPlacement\",\n    value: function checkColPlacement(puzzleString, row, column, value) {\n      var Board = this.createBoard(puzzleString);\n      var clash = false; //  Loop through the rows to find clashes\n\n      for (var rows = 0; rows < 9; rows++) {\n        if (rows !== row) {\n          if (Board[rows][column] === parseInt(value)) {\n            clash = true;\n            break;\n          }\n        }\n      }\n\n      return clash;\n    }\n  }, {\n    key: \"checkRegionPlacement\",\n    value: function checkRegionPlacement(puzzleString, row, column, value) {\n      var Board = this.createBoard(puzzleString);\n      var clash = false;\n      var subgrids = Array.from({\n        length: 9\n      }, function () {\n        return [];\n      });\n\n      for (var _row = 0; _row < 9; _row++) {\n        for (var col = 0; col < 9; col++) {\n          var subgridIndex = Math.floor(_row / 3) * 3 + Math.floor(col / 3);\n          subgrids[subgridIndex].push(Board[_row][col]);\n        }\n      }\n\n      var boxNumber = -1; // Find the box/ index to check in.\n\n      if (row < 3 && column < 3) {\n        boxNumber = 0;\n      } else if (row < 3 && column >= 3 && column < 6) {\n        boxNumber = 1;\n      } else if (row < 3 && column >= 6 && column < 9) {\n        boxNumber = 2;\n      } else if (row >= 3 && row < 6 && column < 3) {\n        boxNumber = 3;\n      } else if (row >= 3 && row < 6 && column >= 3 && column < 6) {\n        boxNumber = 4;\n      } else if (row >= 3 && row < 6 && column >= 6 && column < 9) {\n        boxNumber = 5;\n      } else if (row >= 6 && row < 9 && column < 3) {\n        boxNumber = 6;\n      } else if (row >= 6 && row < 9 && column >= 3 && column < 6) {\n        boxNumber = 7;\n      } else if (row >= 6 && row < 9 && column >= 6 && column < 9) {\n        boxNumber = 8;\n      } // Do the findings\n\n\n      for (var i = 0; i < subgrids[boxNumber].length; i++) {\n        if (subgrids[boxNumber][i] === parseInt(value)) {\n          clash = true;\n        }\n      }\n\n      return clash;\n    }\n  }, {\n    key: \"solvePuzzle\",\n    value: function solvePuzzle(Board, row, col) {\n      var N = 9;\n\n      if (row === N - 1 && col === N) {\n        return Board;\n      }\n\n      if (col === N) {\n        row++;\n        col = 0;\n      }\n\n      if (Board[row][col] != '.') {\n        return this.solvePuzzle(Board, row, col + 1);\n      }\n\n      for (var num = 1; num < 10; num++) {\n        if (this.isSafe(Board, row, col, num)) {\n          Board[row][col] = num;\n\n          if (this.solvePuzzle(Board, row, col + 1)) {\n            return Board;\n          }\n        }\n\n        Board[row][col] = '.';\n      }\n\n      return false;\n    }\n  }, {\n    key: \"solve\",\n    value: function solve(board) {\n      var solvedBoard = this.solvePuzzle(board, 0, 0);\n      var solved = true; // Check that it is solved.\n\n      for (var rows = 0; rows < 9; rows++) {\n        if (solvedBoard[rows].indexOf(\".\") !== -1) {\n          solved = false;\n        }\n      }\n\n      var stringSolution = \"\"; // Stringify the board\n\n      if (solved) {\n        stringSolution = solvedBoard.flat().join(\"\");\n      }\n\n      return stringSolution;\n    }\n  }]);\n\n  return SudokuSolver;\n}();\n\nmodule.exports = SudokuSolver;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "sudoku-solver.js"
      ],
      "names": [
        "SudokuSolver",
        "puzzleString",
        "row",
        "column",
        "value",
        "x",
        "startRow",
        "startCol",
        "i",
        "j",
        "board",
        "index",
        "outerIndex",
        "insideBoard",
        "pushIndex",
        "push",
        "parseInt",
        "puzzleLength",
        "length",
        "Board",
        "createBoard",
        "clash",
        "col",
        "rows",
        "subgrids",
        "Array",
        "from",
        "subgridIndex",
        "Math",
        "floor",
        "boxNumber",
        "N",
        "solvePuzzle",
        "num",
        "isSafe",
        "solvedBoard",
        "solved",
        "indexOf",
        "stringSolution",
        "flat",
        "join",
        "module",
        "exports"
      ],
      "mappings": "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",
      "sourceRoot": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\controllers\\",
      "sourcesContent": [
        "class SudokuSolver {\n  /*\n  * isSafe function used to check if placement in a certain box\n  * is safe or not.  \n  */\n  isSafe(puzzleString, row, column, value){\n  // console.log('isSafe');\n    // Check row\n  for (let x = 0; x < 9; x++) {\n    if (puzzleString[row][x] === value) return false;\n  }\n\n  // Check column\n  for (let x = 0; x < 9; x++) {\n    if (puzzleString[x][column] === value) return false;\n  }\n\n  // Check 3x3 subgrid\n  const startRow = row - (row % 3);\n  const startCol = column - (column % 3);\n\n  for (let i = 0; i < 3; i++) {\n    for (let j = 0; j < 3; j++) {\n      if (puzzleString[i + startRow][j + startCol] === value) return false;\n    }\n  }\n\n  return true;\n  }\n\n  \n  /**\n   * createBoard method takes a string and returns an array of the sudoku\n   * puzzle spread out.\n   * @param {*} puzzleString \n   * @returns board\n   */\n\n  createBoard(puzzleString){\n    let board = [];\n    let index = 0;\n\n    for ( let outerIndex = 0; outerIndex < 9; outerIndex++ ){\n      let insideBoard = [];\n      for( let pushIndex = 0; pushIndex < 9; pushIndex++)\n      {\n        if (puzzleString[index] == '.') {\n          insideBoard.push(puzzleString[index]);\n        } else {\n          insideBoard.push(parseInt(puzzleString[index]));\n        }\n        index++;\n      }\n\n      board.push(insideBoard);\n    }\n    return board;\n  }\n\n  validate(puzzleString) {\n    const puzzleLength = puzzleString.length;\n    if (puzzleLength !== 81){\n      return false;\n    }\n    return true;\n  }\n\n  checkRowPlacement(puzzleString, row, column, value) {\n    let Board = this.createBoard(puzzleString);\n    let clash = false;\n    //  Loop through the columns to find clashes\n    for (let col =0; col < 9; col++){\n      if (col !== column){\n        if(Board[row][col] === parseInt(value)){\n          clash = true;\n          break;\n        }\n      }\n    }\n    return clash;\n\n  }\n\n  checkColPlacement(puzzleString, row, column, value) {\n    let Board = this.createBoard(puzzleString);\n    let clash = false;\n    //  Loop through the rows to find clashes\n    for (let rows =0; rows < 9; rows++){\n      if (rows !== row){\n        if(Board[rows][column] === parseInt(value)){\n          clash = true;\n          break;\n        }\n      }\n    }\n    return clash;\n  }\n\n  checkRegionPlacement(puzzleString, row, column, value) {\n    let Board = this.createBoard(puzzleString);\n    let clash = false;\n    let subgrids = Array.from({ length: 9 }, () => []);\n\n  for (let row = 0; row < 9; row++) {\n    for (let col = 0; col < 9; col++) {\n      const subgridIndex = Math.floor(row / 3) * 3 + Math.floor(col / 3);\n      subgrids[subgridIndex].push(Board[row][col]);\n    }\n  }\n  let boxNumber = -1;\n\n  // Find the box/ index to check in.\n  if (row < 3 && column < 3){\n    boxNumber = 0;\n  } else if ( row < 3 && (column >= 3 && column < 6)){\n    boxNumber = 1;\n  } else if (row < 3 && (column >=6 && column < 9)){\n    boxNumber = 2;\n  } else if ((row >=3 && row < 6) && column < 3){\n    boxNumber = 3;\n  } else if ((row >=3 && row < 6) && (column >= 3 && column < 6)){\n    boxNumber = 4;\n  } else if ((row >= 3 && row < 6) && (column >= 6 && column < 9)){\n    boxNumber = 5;\n  } else if ((row >=6 && row < 9) && column < 3) {\n    boxNumber = 6;\n  } else if ((row >= 6 && row < 9) && (column >= 3 && column < 6)){\n    boxNumber = 7;\n  } else if ((row >= 6 && row < 9) && (column >=6 && column < 9)){\n    boxNumber = 8;\n  }\n\n  // Do the findings\n  for (let i = 0; i < subgrids[boxNumber].length; i++){\n    if(subgrids[boxNumber][i] === parseInt(value)){\n      clash = true;\n    }\n  }\n  return clash;\n\n  }\nsolvePuzzle(Board, row, col){\n  const N = 9;\n\n  if ( row === N - 1 && col === N ){\n    return Board;\n  }\n  if ( col === N ) {\n    row++;\n    col = 0;\n  }\n\n  if ( Board[row][col] != '.' ){\n    return this.solvePuzzle(Board, row, col + 1);\n  }\n\n  for ( let num = 1; num < 10; num++ ){\n    if( this.isSafe(Board, row, col, num) ){\n      Board[row][col] = num;\n\n      if (this.solvePuzzle(Board, row, col + 1)){\n        return Board;\n      }\n    }\n    Board[row][col] = '.';\n  }\n  return false;\n}\nsolve(board){\n let solvedBoard = this.solvePuzzle(board, 0, 0);\n let solved = true;\n // Check that it is solved.\n for ( let rows = 0; rows < 9; rows++ ){\n  if ( solvedBoard[rows].indexOf(\".\") !== -1 ){\n    solved = false;\n  }\n }\n let stringSolution = \"\";\n // Stringify the board\n if ( solved ){\n    stringSolution = solvedBoard.flat().join(\"\");\n }\n return stringSolution;\n}\n\n}\n\nmodule.exports = SudokuSolver;\n\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1749070385079
  },
  "{\"sourceRoot\":\"C:\\\\Users\\\\27682\\\\Desktop\\\\Local_Projects\\\\Quality_Assurance_and_Testing_with_Chai\\\\Projects\\\\boilerplate-project-sudoku-solver\\\\tests\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\27682\\\\Desktop\\\\Local_Projects\\\\Quality_Assurance_and_Testing_with_Chai\\\\Projects\\\\boilerplate-project-sudoku-solver\",\"filename\":\"C:\\\\Users\\\\27682\\\\Desktop\\\\Local_Projects\\\\Quality_Assurance_and_Testing_with_Chai\\\\Projects\\\\boilerplate-project-sudoku-solver\\\\tests\\\\2_functional-tests.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\27682\\\\Desktop\\\\Local_Projects\\\\Quality_Assurance_and_Testing_with_Chai\\\\Projects\\\\boilerplate-project-sudoku-solver\",\"plugins\":[{\"key\":\"proposal-numeric-separator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"NumericLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-logical-assignment-operators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.11.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\tests\\",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver",
      "filename": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\tests\\2_functional-tests.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-numeric-separator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "NumericLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-logical-assignment-operators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\tests\\2_functional-tests.js",
        "plugins": [
          "numericSeparator",
          "logicalAssignment",
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "exportNamespaceFrom",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\tests\\2_functional-tests.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\tests\\",
        "sourceFileName": "2_functional-tests.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar chai = require(\"chai\");\n\nvar chaiHttp = require('chai-http');\n\nvar assert = chai.assert;\n\nvar server = require('../server');\n\nchai.use(chaiHttp);\nsuite('Functional Tests', function () {});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIjJfZnVuY3Rpb25hbC10ZXN0cy5qcyJdLCJuYW1lcyI6WyJjaGFpIiwicmVxdWlyZSIsImNoYWlIdHRwIiwiYXNzZXJ0Iiwic2VydmVyIiwidXNlIiwic3VpdGUiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxJQUFNQyxRQUFRLEdBQUdELE9BQU8sQ0FBQyxXQUFELENBQXhCOztBQUNBLElBQU1FLE1BQU0sR0FBR0gsSUFBSSxDQUFDRyxNQUFwQjs7QUFDQSxJQUFNQyxNQUFNLEdBQUdILE9BQU8sQ0FBQyxXQUFELENBQXRCOztBQUVBRCxJQUFJLENBQUNLLEdBQUwsQ0FBU0gsUUFBVDtBQUVBSSxLQUFLLENBQUMsa0JBQUQsRUFBcUIsWUFBTSxDQUUvQixDQUZJLENBQUwiLCJzb3VyY2VSb290IjoiQzpcXFVzZXJzXFwyNzY4MlxcRGVza3RvcFxcTG9jYWxfUHJvamVjdHNcXFF1YWxpdHlfQXNzdXJhbmNlX2FuZF9UZXN0aW5nX3dpdGhfQ2hhaVxcUHJvamVjdHNcXGJvaWxlcnBsYXRlLXByb2plY3Qtc3Vkb2t1LXNvbHZlclxcdGVzdHNcXCIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNoYWkgPSByZXF1aXJlKFwiY2hhaVwiKTtcbmNvbnN0IGNoYWlIdHRwID0gcmVxdWlyZSgnY2hhaS1odHRwJyk7XG5jb25zdCBhc3NlcnQgPSBjaGFpLmFzc2VydDtcbmNvbnN0IHNlcnZlciA9IHJlcXVpcmUoJy4uL3NlcnZlcicpO1xuXG5jaGFpLnVzZShjaGFpSHR0cCk7XG5cbnN1aXRlKCdGdW5jdGlvbmFsIFRlc3RzJywgKCkgPT4ge1xuXG59KTtcblxuIl19",
    "map": {
      "version": 3,
      "sources": [
        "2_functional-tests.js"
      ],
      "names": [
        "chai",
        "require",
        "chaiHttp",
        "assert",
        "server",
        "use",
        "suite"
      ],
      "mappings": ";;AAAA,IAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,WAAD,CAAxB;;AACA,IAAME,MAAM,GAAGH,IAAI,CAACG,MAApB;;AACA,IAAMC,MAAM,GAAGH,OAAO,CAAC,WAAD,CAAtB;;AAEAD,IAAI,CAACK,GAAL,CAASH,QAAT;AAEAI,KAAK,CAAC,kBAAD,EAAqB,YAAM,CAE/B,CAFI,CAAL",
      "sourceRoot": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\tests\\",
      "sourcesContent": [
        "const chai = require(\"chai\");\nconst chaiHttp = require('chai-http');\nconst assert = chai.assert;\nconst server = require('../server');\n\nchai.use(chaiHttp);\n\nsuite('Functional Tests', () => {\n\n});\n\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1746621611440
  },
  "{\"sourceRoot\":\"C:\\\\Users\\\\27682\\\\Desktop\\\\Local_Projects\\\\Quality_Assurance_and_Testing_with_Chai\\\\Projects\\\\boilerplate-project-sudoku-solver\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\27682\\\\Desktop\\\\Local_Projects\\\\Quality_Assurance_and_Testing_with_Chai\\\\Projects\\\\boilerplate-project-sudoku-solver\",\"filename\":\"C:\\\\Users\\\\27682\\\\Desktop\\\\Local_Projects\\\\Quality_Assurance_and_Testing_with_Chai\\\\Projects\\\\boilerplate-project-sudoku-solver\\\\server.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\27682\\\\Desktop\\\\Local_Projects\\\\Quality_Assurance_and_Testing_with_Chai\\\\Projects\\\\boilerplate-project-sudoku-solver\",\"plugins\":[{\"key\":\"proposal-numeric-separator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"NumericLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-logical-assignment-operators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.11.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver",
      "filename": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\server.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-numeric-separator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "NumericLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-logical-assignment-operators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\server.js",
        "plugins": [
          "numericSeparator",
          "logicalAssignment",
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "exportNamespaceFrom",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\server.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\",
        "sourceFileName": "server.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nrequire('dotenv').config();\n\nvar express = require('express');\n\nvar bodyParser = require('body-parser');\n\nvar expect = require('chai').expect;\n\nvar cors = require('cors');\n\nvar fccTestingRoutes = require('./routes/fcctesting.js');\n\nvar apiRoutes = require('./routes/api.js');\n\nvar runner = require('./test-runner');\n\nvar app = express();\napp.use('/public', express[\"static\"](process.cwd() + '/public'));\napp.use(cors({\n  origin: '*'\n})); //For FCC testing purposes only\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({\n  extended: true\n})); //Index page (static HTML)\n\napp.route('/').get(function (req, res) {\n  res.sendFile(process.cwd() + '/views/index.html');\n}); //For FCC testing purposes\n\nfccTestingRoutes(app); // User routes\n\napiRoutes(app); //404 Not Found Middleware\n\napp.use(function (req, res, next) {\n  res.status(404).type('text').send('Not Found');\n}); //Start our server and tests!\n\nvar PORT = process.env.PORT || 3000;\napp.listen(PORT, function () {\n  console.log(\"Listening on port \" + PORT); // process.env.NODE_ENV='test'\n\n  if (process.env.NODE_ENV === 'test') {\n    console.log('Running Tests...');\n    setTimeout(function () {\n      try {\n        runner.run();\n      } catch (error) {\n        console.log('Tests are not valid:');\n        console.error(error);\n      }\n    }, 1500);\n  }\n});\nmodule.exports = app; // for testing\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlci5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwiY29uZmlnIiwiZXhwcmVzcyIsImJvZHlQYXJzZXIiLCJleHBlY3QiLCJjb3JzIiwiZmNjVGVzdGluZ1JvdXRlcyIsImFwaVJvdXRlcyIsInJ1bm5lciIsImFwcCIsInVzZSIsInByb2Nlc3MiLCJjd2QiLCJvcmlnaW4iLCJqc29uIiwidXJsZW5jb2RlZCIsImV4dGVuZGVkIiwicm91dGUiLCJnZXQiLCJyZXEiLCJyZXMiLCJzZW5kRmlsZSIsIm5leHQiLCJzdGF0dXMiLCJ0eXBlIiwic2VuZCIsIlBPUlQiLCJlbnYiLCJsaXN0ZW4iLCJjb25zb2xlIiwibG9nIiwiTk9ERV9FTlYiLCJzZXRUaW1lb3V0IiwicnVuIiwiZXJyb3IiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBQSxPQUFPLENBQUMsUUFBRCxDQUFQLENBQWtCQyxNQUFsQjs7QUFDQSxJQUFNQyxPQUFPLEdBQU9GLE9BQU8sQ0FBQyxTQUFELENBQTNCOztBQUNBLElBQU1HLFVBQVUsR0FBSUgsT0FBTyxDQUFDLGFBQUQsQ0FBM0I7O0FBQ0EsSUFBTUksTUFBTSxHQUFRSixPQUFPLENBQUMsTUFBRCxDQUFQLENBQWdCSSxNQUFwQzs7QUFDQSxJQUFNQyxJQUFJLEdBQVVMLE9BQU8sQ0FBQyxNQUFELENBQTNCOztBQUVBLElBQU1NLGdCQUFnQixHQUFJTixPQUFPLENBQUMsd0JBQUQsQ0FBakM7O0FBQ0EsSUFBTU8sU0FBUyxHQUFXUCxPQUFPLENBQUMsaUJBQUQsQ0FBakM7O0FBQ0EsSUFBTVEsTUFBTSxHQUFjUixPQUFPLENBQUMsZUFBRCxDQUFqQzs7QUFFQSxJQUFNUyxHQUFHLEdBQUdQLE9BQU8sRUFBbkI7QUFFQU8sR0FBRyxDQUFDQyxHQUFKLENBQVEsU0FBUixFQUFtQlIsT0FBTyxVQUFQLENBQWVTLE9BQU8sQ0FBQ0MsR0FBUixLQUFnQixTQUEvQixDQUFuQjtBQUNBSCxHQUFHLENBQUNDLEdBQUosQ0FBUUwsSUFBSSxDQUFDO0FBQUNRLEVBQUFBLE1BQU0sRUFBRTtBQUFULENBQUQsQ0FBWixFLENBQThCOztBQUU5QkosR0FBRyxDQUFDQyxHQUFKLENBQVFQLFVBQVUsQ0FBQ1csSUFBWCxFQUFSO0FBQ0FMLEdBQUcsQ0FBQ0MsR0FBSixDQUFRUCxVQUFVLENBQUNZLFVBQVgsQ0FBc0I7QUFBRUMsRUFBQUEsUUFBUSxFQUFFO0FBQVosQ0FBdEIsQ0FBUixFLENBRUE7O0FBQ0FQLEdBQUcsQ0FBQ1EsS0FBSixDQUFVLEdBQVYsRUFDR0MsR0FESCxDQUNPLFVBQVVDLEdBQVYsRUFBZUMsR0FBZixFQUFvQjtBQUN2QkEsRUFBQUEsR0FBRyxDQUFDQyxRQUFKLENBQWFWLE9BQU8sQ0FBQ0MsR0FBUixLQUFnQixtQkFBN0I7QUFDRCxDQUhILEUsQ0FLQTs7QUFDQU4sZ0JBQWdCLENBQUNHLEdBQUQsQ0FBaEIsQyxDQUVBOztBQUNBRixTQUFTLENBQUNFLEdBQUQsQ0FBVCxDLENBRUE7O0FBQ0FBLEdBQUcsQ0FBQ0MsR0FBSixDQUFRLFVBQVNTLEdBQVQsRUFBY0MsR0FBZCxFQUFtQkUsSUFBbkIsRUFBeUI7QUFDL0JGLEVBQUFBLEdBQUcsQ0FBQ0csTUFBSixDQUFXLEdBQVgsRUFDR0MsSUFESCxDQUNRLE1BRFIsRUFFR0MsSUFGSCxDQUVRLFdBRlI7QUFHRCxDQUpELEUsQ0FNQTs7QUFDQSxJQUFNQyxJQUFJLEdBQUdmLE9BQU8sQ0FBQ2dCLEdBQVIsQ0FBWUQsSUFBWixJQUFvQixJQUFqQztBQUNBakIsR0FBRyxDQUFDbUIsTUFBSixDQUFXRixJQUFYLEVBQWlCLFlBQVk7QUFDM0JHLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLHVCQUF1QkosSUFBbkMsRUFEMkIsQ0FFM0I7O0FBQ0EsTUFBSWYsT0FBTyxDQUFDZ0IsR0FBUixDQUFZSSxRQUFaLEtBQXVCLE1BQTNCLEVBQW1DO0FBQ2pDRixJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxrQkFBWjtBQUNBRSxJQUFBQSxVQUFVLENBQUMsWUFBWTtBQUNyQixVQUFJO0FBQ0Z4QixRQUFBQSxNQUFNLENBQUN5QixHQUFQO0FBQ0QsT0FGRCxDQUVFLE9BQU9DLEtBQVAsRUFBYztBQUNkTCxRQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxzQkFBWjtBQUNBRCxRQUFBQSxPQUFPLENBQUNLLEtBQVIsQ0FBY0EsS0FBZDtBQUNEO0FBQ0YsS0FQUyxFQU9QLElBUE8sQ0FBVjtBQVFEO0FBQ0YsQ0FkRDtBQWdCQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCM0IsR0FBakIsQyxDQUFzQiIsInNvdXJjZVJvb3QiOiJDOlxcVXNlcnNcXDI3NjgyXFxEZXNrdG9wXFxMb2NhbF9Qcm9qZWN0c1xcUXVhbGl0eV9Bc3N1cmFuY2VfYW5kX1Rlc3Rpbmdfd2l0aF9DaGFpXFxQcm9qZWN0c1xcYm9pbGVycGxhdGUtcHJvamVjdC1zdWRva3Utc29sdmVyXFwiLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKCdkb3RlbnYnKS5jb25maWcoKTtcbmNvbnN0IGV4cHJlc3MgICAgID0gcmVxdWlyZSgnZXhwcmVzcycpO1xuY29uc3QgYm9keVBhcnNlciAgPSByZXF1aXJlKCdib2R5LXBhcnNlcicpO1xuY29uc3QgZXhwZWN0ICAgICAgPSByZXF1aXJlKCdjaGFpJykuZXhwZWN0O1xuY29uc3QgY29ycyAgICAgICAgPSByZXF1aXJlKCdjb3JzJyk7XG5cbmNvbnN0IGZjY1Rlc3RpbmdSb3V0ZXMgID0gcmVxdWlyZSgnLi9yb3V0ZXMvZmNjdGVzdGluZy5qcycpO1xuY29uc3QgYXBpUm91dGVzICAgICAgICAgPSByZXF1aXJlKCcuL3JvdXRlcy9hcGkuanMnKTtcbmNvbnN0IHJ1bm5lciAgICAgICAgICAgID0gcmVxdWlyZSgnLi90ZXN0LXJ1bm5lcicpO1xuXG5jb25zdCBhcHAgPSBleHByZXNzKCk7XG5cbmFwcC51c2UoJy9wdWJsaWMnLCBleHByZXNzLnN0YXRpYyhwcm9jZXNzLmN3ZCgpICsgJy9wdWJsaWMnKSk7XG5hcHAudXNlKGNvcnMoe29yaWdpbjogJyonfSkpOyAvL0ZvciBGQ0MgdGVzdGluZyBwdXJwb3NlcyBvbmx5XG5cbmFwcC51c2UoYm9keVBhcnNlci5qc29uKCkpO1xuYXBwLnVzZShib2R5UGFyc2VyLnVybGVuY29kZWQoeyBleHRlbmRlZDogdHJ1ZSB9KSk7XG5cbi8vSW5kZXggcGFnZSAoc3RhdGljIEhUTUwpXG5hcHAucm91dGUoJy8nKVxuICAuZ2V0KGZ1bmN0aW9uIChyZXEsIHJlcykge1xuICAgIHJlcy5zZW5kRmlsZShwcm9jZXNzLmN3ZCgpICsgJy92aWV3cy9pbmRleC5odG1sJyk7XG4gIH0pO1xuXG4vL0ZvciBGQ0MgdGVzdGluZyBwdXJwb3Nlc1xuZmNjVGVzdGluZ1JvdXRlcyhhcHApO1xuXG4vLyBVc2VyIHJvdXRlc1xuYXBpUm91dGVzKGFwcCk7XG4gICAgXG4vLzQwNCBOb3QgRm91bmQgTWlkZGxld2FyZVxuYXBwLnVzZShmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICByZXMuc3RhdHVzKDQwNClcbiAgICAudHlwZSgndGV4dCcpXG4gICAgLnNlbmQoJ05vdCBGb3VuZCcpO1xufSk7XG5cbi8vU3RhcnQgb3VyIHNlcnZlciBhbmQgdGVzdHMhXG5jb25zdCBQT1JUID0gcHJvY2Vzcy5lbnYuUE9SVCB8fCAzMDAwXG5hcHAubGlzdGVuKFBPUlQsIGZ1bmN0aW9uICgpIHtcbiAgY29uc29sZS5sb2coXCJMaXN0ZW5pbmcgb24gcG9ydCBcIiArIFBPUlQpO1xuICAvLyBwcm9jZXNzLmVudi5OT0RFX0VOVj0ndGVzdCdcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WPT09J3Rlc3QnKSB7XG4gICAgY29uc29sZS5sb2coJ1J1bm5pbmcgVGVzdHMuLi4nKTtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJ1bm5lci5ydW4oKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdUZXN0cyBhcmUgbm90IHZhbGlkOicpO1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgIH1cbiAgICB9LCAxNTAwKTtcbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXBwOyAvLyBmb3IgdGVzdGluZ1xuIl19",
    "map": {
      "version": 3,
      "sources": [
        "server.js"
      ],
      "names": [
        "require",
        "config",
        "express",
        "bodyParser",
        "expect",
        "cors",
        "fccTestingRoutes",
        "apiRoutes",
        "runner",
        "app",
        "use",
        "process",
        "cwd",
        "origin",
        "json",
        "urlencoded",
        "extended",
        "route",
        "get",
        "req",
        "res",
        "sendFile",
        "next",
        "status",
        "type",
        "send",
        "PORT",
        "env",
        "listen",
        "console",
        "log",
        "NODE_ENV",
        "setTimeout",
        "run",
        "error",
        "module",
        "exports"
      ],
      "mappings": ";;AAAAA,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB;;AACA,IAAMC,OAAO,GAAOF,OAAO,CAAC,SAAD,CAA3B;;AACA,IAAMG,UAAU,GAAIH,OAAO,CAAC,aAAD,CAA3B;;AACA,IAAMI,MAAM,GAAQJ,OAAO,CAAC,MAAD,CAAP,CAAgBI,MAApC;;AACA,IAAMC,IAAI,GAAUL,OAAO,CAAC,MAAD,CAA3B;;AAEA,IAAMM,gBAAgB,GAAIN,OAAO,CAAC,wBAAD,CAAjC;;AACA,IAAMO,SAAS,GAAWP,OAAO,CAAC,iBAAD,CAAjC;;AACA,IAAMQ,MAAM,GAAcR,OAAO,CAAC,eAAD,CAAjC;;AAEA,IAAMS,GAAG,GAAGP,OAAO,EAAnB;AAEAO,GAAG,CAACC,GAAJ,CAAQ,SAAR,EAAmBR,OAAO,UAAP,CAAeS,OAAO,CAACC,GAAR,KAAgB,SAA/B,CAAnB;AACAH,GAAG,CAACC,GAAJ,CAAQL,IAAI,CAAC;AAACQ,EAAAA,MAAM,EAAE;AAAT,CAAD,CAAZ,E,CAA8B;;AAE9BJ,GAAG,CAACC,GAAJ,CAAQP,UAAU,CAACW,IAAX,EAAR;AACAL,GAAG,CAACC,GAAJ,CAAQP,UAAU,CAACY,UAAX,CAAsB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAtB,CAAR,E,CAEA;;AACAP,GAAG,CAACQ,KAAJ,CAAU,GAAV,EACGC,GADH,CACO,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AACvBA,EAAAA,GAAG,CAACC,QAAJ,CAAaV,OAAO,CAACC,GAAR,KAAgB,mBAA7B;AACD,CAHH,E,CAKA;;AACAN,gBAAgB,CAACG,GAAD,CAAhB,C,CAEA;;AACAF,SAAS,CAACE,GAAD,CAAT,C,CAEA;;AACAA,GAAG,CAACC,GAAJ,CAAQ,UAASS,GAAT,EAAcC,GAAd,EAAmBE,IAAnB,EAAyB;AAC/BF,EAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EACGC,IADH,CACQ,MADR,EAEGC,IAFH,CAEQ,WAFR;AAGD,CAJD,E,CAMA;;AACA,IAAMC,IAAI,GAAGf,OAAO,CAACgB,GAAR,CAAYD,IAAZ,IAAoB,IAAjC;AACAjB,GAAG,CAACmB,MAAJ,CAAWF,IAAX,EAAiB,YAAY;AAC3BG,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAuBJ,IAAnC,EAD2B,CAE3B;;AACA,MAAIf,OAAO,CAACgB,GAAR,CAAYI,QAAZ,KAAuB,MAA3B,EAAmC;AACjCF,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACAE,IAAAA,UAAU,CAAC,YAAY;AACrB,UAAI;AACFxB,QAAAA,MAAM,CAACyB,GAAP;AACD,OAFD,CAEE,OAAOC,KAAP,EAAc;AACdL,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACAD,QAAAA,OAAO,CAACK,KAAR,CAAcA,KAAd;AACD;AACF,KAPS,EAOP,IAPO,CAAV;AAQD;AACF,CAdD;AAgBAC,MAAM,CAACC,OAAP,GAAiB3B,GAAjB,C,CAAsB",
      "sourceRoot": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\",
      "sourcesContent": [
        "require('dotenv').config();\nconst express     = require('express');\nconst bodyParser  = require('body-parser');\nconst expect      = require('chai').expect;\nconst cors        = require('cors');\n\nconst fccTestingRoutes  = require('./routes/fcctesting.js');\nconst apiRoutes         = require('./routes/api.js');\nconst runner            = require('./test-runner');\n\nconst app = express();\n\napp.use('/public', express.static(process.cwd() + '/public'));\napp.use(cors({origin: '*'})); //For FCC testing purposes only\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\n\n//Index page (static HTML)\napp.route('/')\n  .get(function (req, res) {\n    res.sendFile(process.cwd() + '/views/index.html');\n  });\n\n//For FCC testing purposes\nfccTestingRoutes(app);\n\n// User routes\napiRoutes(app);\n    \n//404 Not Found Middleware\napp.use(function(req, res, next) {\n  res.status(404)\n    .type('text')\n    .send('Not Found');\n});\n\n//Start our server and tests!\nconst PORT = process.env.PORT || 3000\napp.listen(PORT, function () {\n  console.log(\"Listening on port \" + PORT);\n  // process.env.NODE_ENV='test'\n  if (process.env.NODE_ENV==='test') {\n    console.log('Running Tests...');\n    setTimeout(function () {\n      try {\n        runner.run();\n      } catch (error) {\n        console.log('Tests are not valid:');\n        console.error(error);\n      }\n    }, 1500);\n  }\n});\n\nmodule.exports = app; // for testing\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1746621611365
  },
  "{\"sourceRoot\":\"C:\\\\Users\\\\27682\\\\Desktop\\\\Local_Projects\\\\Quality_Assurance_and_Testing_with_Chai\\\\Projects\\\\boilerplate-project-sudoku-solver\\\\routes\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\27682\\\\Desktop\\\\Local_Projects\\\\Quality_Assurance_and_Testing_with_Chai\\\\Projects\\\\boilerplate-project-sudoku-solver\",\"filename\":\"C:\\\\Users\\\\27682\\\\Desktop\\\\Local_Projects\\\\Quality_Assurance_and_Testing_with_Chai\\\\Projects\\\\boilerplate-project-sudoku-solver\\\\routes\\\\fcctesting.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test\",\"root\":\"C:\\\\Users\\\\27682\\\\Desktop\\\\Local_Projects\\\\Quality_Assurance_and_Testing_with_Chai\\\\Projects\\\\boilerplate-project-sudoku-solver\",\"plugins\":[{\"key\":\"proposal-numeric-separator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"NumericLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-logical-assignment-operators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.11.6:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\routes\\",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver",
      "filename": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\routes\\fcctesting.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "test",
      "root": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-numeric-separator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "NumericLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-logical-assignment-operators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\routes\\fcctesting.js",
        "plugins": [
          "numericSeparator",
          "logicalAssignment",
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "exportNamespaceFrom",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\routes\\fcctesting.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\routes\\",
        "sourceFileName": "fcctesting.js"
      }
    },
    "ast": null,
    "code": "/*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*       DO NOT EDIT THIS FILE\n*       For FCC testing purposes!\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*/\n'use strict';\n\nvar cors = require('cors');\n\nvar fs = require('fs');\n\nvar runner = require('../test-runner');\n\nmodule.exports = function (app) {\n  app.route('/_api/server.js').get(function (req, res, next) {\n    console.log('requested');\n    fs.readFile(__dirname + '/server.js', function (err, data) {\n      if (err) return next(err);\n      res.send(data.toString());\n    });\n  });\n  app.route('/_api/routes/api.js').get(function (req, res, next) {\n    console.log('requested');\n    fs.readFile(__dirname + '/routes/api.js', function (err, data) {\n      if (err) return next(err);\n      res.type('txt').send(data.toString());\n    });\n  });\n  app.route('/_api/controllers/convertHandler.js').get(function (req, res, next) {\n    console.log('requested');\n    fs.readFile(__dirname + '/controllers/convertHandler.js', function (err, data) {\n      if (err) return next(err);\n      res.type('txt').send(data.toString());\n    });\n  });\n  app.get('/_api/get-tests', cors(), function (req, res, next) {\n    console.log('requested');\n    if (process.env.NODE_ENV === 'test') return next();\n    res.json({\n      status: 'unavailable'\n    });\n  }, function (req, res, next) {\n    if (!runner.report) return next();\n    res.json(testFilter(runner.report, req.query.type, req.query.n));\n  }, function (req, res) {\n    runner.on('done', function (report) {\n      process.nextTick(function () {\n        return res.json(testFilter(runner.report, req.query.type, req.query.n));\n      });\n    });\n  });\n  app.get('/_api/app-info', function (req, res) {\n    var hs = Object.keys(res._headers).filter(function (h) {\n      return !h.match(/^access-control-\\w+/);\n    });\n    var hObj = {};\n    hs.forEach(function (h) {\n      hObj[h] = res._headers[h];\n    });\n    delete res._headers['strict-transport-security'];\n    res.json({\n      headers: hObj\n    });\n  });\n};\n\nfunction testFilter(tests, type, n) {\n  var out;\n\n  switch (type) {\n    case 'unit':\n      out = tests.filter(function (t) {\n        return t.context.match('Unit Tests');\n      });\n      break;\n\n    case 'functional':\n      out = tests.filter(function (t) {\n        return t.context.match('Functional Tests') && !t.title.match('#example');\n      });\n      break;\n\n    default:\n      out = tests;\n  }\n\n  if (n !== undefined) {\n    return out[n] || out;\n  }\n\n  return out;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZjY3Rlc3RpbmcuanMiXSwibmFtZXMiOlsiY29ycyIsInJlcXVpcmUiLCJmcyIsInJ1bm5lciIsIm1vZHVsZSIsImV4cG9ydHMiLCJhcHAiLCJyb3V0ZSIsImdldCIsInJlcSIsInJlcyIsIm5leHQiLCJjb25zb2xlIiwibG9nIiwicmVhZEZpbGUiLCJfX2Rpcm5hbWUiLCJlcnIiLCJkYXRhIiwic2VuZCIsInRvU3RyaW5nIiwidHlwZSIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsImpzb24iLCJzdGF0dXMiLCJyZXBvcnQiLCJ0ZXN0RmlsdGVyIiwicXVlcnkiLCJuIiwib24iLCJuZXh0VGljayIsImhzIiwiT2JqZWN0Iiwia2V5cyIsIl9oZWFkZXJzIiwiZmlsdGVyIiwiaCIsIm1hdGNoIiwiaE9iaiIsImZvckVhY2giLCJoZWFkZXJzIiwidGVzdHMiLCJvdXQiLCJ0IiwiY29udGV4dCIsInRpdGxlIiwidW5kZWZpbmVkIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUEyQkE7O0FBRUEsSUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxJQUFNQyxFQUFFLEdBQUdELE9BQU8sQ0FBQyxJQUFELENBQWxCOztBQUNBLElBQU1FLE1BQU0sR0FBR0YsT0FBTyxDQUFDLGdCQUFELENBQXRCOztBQUVBRyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsVUFBVUMsR0FBVixFQUFlO0FBRTlCQSxFQUFBQSxHQUFHLENBQUNDLEtBQUosQ0FBVSxpQkFBVixFQUNHQyxHQURILENBQ08sVUFBU0MsR0FBVCxFQUFjQyxHQUFkLEVBQW1CQyxJQUFuQixFQUF5QjtBQUM1QkMsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksV0FBWjtBQUNBWCxJQUFBQSxFQUFFLENBQUNZLFFBQUgsQ0FBWUMsU0FBUyxHQUFHLFlBQXhCLEVBQXNDLFVBQVNDLEdBQVQsRUFBY0MsSUFBZCxFQUFvQjtBQUN4RCxVQUFHRCxHQUFI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TjtBQVJKOztBQVVBLE1BQUdiLENBQUMsS0FBS2tCLFNBQVQsRUFBb0I7QUFDbEIsV0FBT0osR0FBRyxDQUFDZCxDQUFELENBQUgsSUFBVWMsR0FBakI7QUFDRDs7QUFDRCxTQUFPQSxHQUFQO0FBQ0QiLCJzb3VyY2VSb290IjoiQzpcXFVzZXJzXFwyNzY4MlxcRGVza3RvcFxcTG9jYWxfUHJvamVjdHNcXFF1YWxpdHlfQXNzdXJhbmNlX2FuZF9UZXN0aW5nX3dpdGhfQ2hhaVxcUHJvamVjdHNcXGJvaWxlcnBsYXRlLXByb2plY3Qtc3Vkb2t1LXNvbHZlclxccm91dGVzXFwiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuKlxuKlxuKlxuKlxuKlxuKlxuKlxuKlxuKlxuKlxuKlxuKiAgICAgICBETyBOT1QgRURJVCBUSElTIEZJTEVcbiogICAgICAgRm9yIEZDQyB0ZXN0aW5nIHB1cnBvc2VzIVxuKlxuKlxuKlxuKlxuKlxuKlxuKlxuKlxuKlxuKlxuKlxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBjb3JzID0gcmVxdWlyZSgnY29ycycpO1xuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuY29uc3QgcnVubmVyID0gcmVxdWlyZSgnLi4vdGVzdC1ydW5uZXInKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXBwKSB7XG5cbiAgYXBwLnJvdXRlKCcvX2FwaS9zZXJ2ZXIuanMnKVxuICAgIC5nZXQoZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdyZXF1ZXN0ZWQnKTtcbiAgICAgIGZzLnJlYWRGaWxlKF9fZGlybmFtZSArICcvc2VydmVyLmpzJywgZnVuY3Rpb24oZXJyLCBkYXRhKSB7XG4gICAgICAgIGlmKGVycikgcmV0dXJuIG5leHQoZXJyKTtcbiAgICAgICAgcmVzLnNlbmQoZGF0YS50b1N0cmluZygpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICBhcHAucm91dGUoJy9fYXBpL3JvdXRlcy9hcGkuanMnKVxuICAgIC5nZXQoZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdyZXF1ZXN0ZWQnKTtcbiAgICAgIGZzLnJlYWRGaWxlKF9fZGlybmFtZSArICcvcm91dGVzL2FwaS5qcycsIGZ1bmN0aW9uKGVyciwgZGF0YSkge1xuICAgICAgICBpZihlcnIpIHJldHVybiBuZXh0KGVycik7XG4gICAgICAgIHJlcy50eXBlKCd0eHQnKS5zZW5kKGRhdGEudG9TdHJpbmcoKSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgYXBwLnJvdXRlKCcvX2FwaS9jb250cm9sbGVycy9jb252ZXJ0SGFuZGxlci5qcycpXG4gICAgLmdldChmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICAgICAgY29uc29sZS5sb2coJ3JlcXVlc3RlZCcpO1xuICAgICAgZnMucmVhZEZpbGUoX19kaXJuYW1lICsgJy9jb250cm9sbGVycy9jb252ZXJ0SGFuZGxlci5qcycsIGZ1bmN0aW9uKGVyciwgZGF0YSkge1xuICAgICAgICBpZihlcnIpIHJldHVybiBuZXh0KGVycik7XG4gICAgICAgIHJlcy50eXBlKCd0eHQnKS5zZW5kKGRhdGEudG9TdHJpbmcoKSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICBhcHAuZ2V0KCcvX2FwaS9nZXQtdGVzdHMnLCBjb3JzKCksIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KXtcbiAgICBjb25zb2xlLmxvZygncmVxdWVzdGVkJyk7XG4gICAgaWYocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICd0ZXN0JykgcmV0dXJuIG5leHQoKTtcbiAgICByZXMuanNvbih7c3RhdHVzOiAndW5hdmFpbGFibGUnfSk7XG4gIH0sXG4gIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KXtcbiAgICBpZighcnVubmVyLnJlcG9ydCkgcmV0dXJuIG5leHQoKTtcbiAgICByZXMuanNvbih0ZXN0RmlsdGVyKHJ1bm5lci5yZXBvcnQsIHJlcS5xdWVyeS50eXBlLCByZXEucXVlcnkubikpO1xuICB9LFxuICBmdW5jdGlvbihyZXEsIHJlcyl7XG4gICAgcnVubmVyLm9uKCdkb25lJywgZnVuY3Rpb24ocmVwb3J0KXtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soKCkgPT4gIHJlcy5qc29uKHRlc3RGaWx0ZXIocnVubmVyLnJlcG9ydCwgcmVxLnF1ZXJ5LnR5cGUsIHJlcS5xdWVyeS5uKSkpO1xuICAgIH0pO1xuICB9KTtcbiAgYXBwLmdldCgnL19hcGkvYXBwLWluZm8nLCBmdW5jdGlvbihyZXEsIHJlcykge1xuICAgIGxldCBocyA9IE9iamVjdC5rZXlzKHJlcy5faGVhZGVycylcbiAgICAgIC5maWx0ZXIoaCA9PiAhaC5tYXRjaCgvXmFjY2Vzcy1jb250cm9sLVxcdysvKSk7XG4gICAgbGV0IGhPYmogPSB7fTtcbiAgICBocy5mb3JFYWNoKGggPT4ge2hPYmpbaF0gPSByZXMuX2hlYWRlcnNbaF19KTtcbiAgICBkZWxldGUgcmVzLl9oZWFkZXJzWydzdHJpY3QtdHJhbnNwb3J0LXNlY3VyaXR5J107XG4gICAgcmVzLmpzb24oe2hlYWRlcnM6IGhPYmp9KTtcbiAgfSk7XG4gIFxufTtcblxuZnVuY3Rpb24gdGVzdEZpbHRlcih0ZXN0cywgdHlwZSwgbikge1xuICBsZXQgb3V0O1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICd1bml0JyA6XG4gICAgICBvdXQgPSB0ZXN0cy5maWx0ZXIodCA9PiB0LmNvbnRleHQubWF0Y2goJ1VuaXQgVGVzdHMnKSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdmdW5jdGlvbmFsJzpcbiAgICAgIG91dCA9IHRlc3RzLmZpbHRlcih0ID0+IHQuY29udGV4dC5tYXRjaCgnRnVuY3Rpb25hbCBUZXN0cycpICYmICF0LnRpdGxlLm1hdGNoKCcjZXhhbXBsZScpKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBvdXQgPSB0ZXN0cztcbiAgfVxuICBpZihuICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gb3V0W25dIHx8IG91dDtcbiAgfVxuICByZXR1cm4gb3V0O1xufSJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "fcctesting.js"
      ],
      "names": [
        "cors",
        "require",
        "fs",
        "runner",
        "module",
        "exports",
        "app",
        "route",
        "get",
        "req",
        "res",
        "next",
        "console",
        "log",
        "readFile",
        "__dirname",
        "err",
        "data",
        "send",
        "toString",
        "type",
        "process",
        "env",
        "NODE_ENV",
        "json",
        "status",
        "report",
        "testFilter",
        "query",
        "n",
        "on",
        "nextTick",
        "hs",
        "Object",
        "keys",
        "_headers",
        "filter",
        "h",
        "match",
        "hObj",
        "forEach",
        "headers",
        "tests",
        "out",
        "t",
        "context",
        "title",
        "undefined"
      ],
      "mappings": "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",
      "sourceRoot": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\routes\\",
      "sourcesContent": [
        "/*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*       DO NOT EDIT THIS FILE\n*       For FCC testing purposes!\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*/\n\n'use strict';\n\nconst cors = require('cors');\nconst fs = require('fs');\nconst runner = require('../test-runner');\n\nmodule.exports = function (app) {\n\n  app.route('/_api/server.js')\n    .get(function(req, res, next) {\n      console.log('requested');\n      fs.readFile(__dirname + '/server.js', function(err, data) {\n        if(err) return next(err);\n        res.send(data.toString());\n      });\n    });\n  app.route('/_api/routes/api.js')\n    .get(function(req, res, next) {\n      console.log('requested');\n      fs.readFile(__dirname + '/routes/api.js', function(err, data) {\n        if(err) return next(err);\n        res.type('txt').send(data.toString());\n      });\n    });\n  app.route('/_api/controllers/convertHandler.js')\n    .get(function(req, res, next) {\n      console.log('requested');\n      fs.readFile(__dirname + '/controllers/convertHandler.js', function(err, data) {\n        if(err) return next(err);\n        res.type('txt').send(data.toString());\n      });\n    });\n\n  app.get('/_api/get-tests', cors(), function(req, res, next){\n    console.log('requested');\n    if(process.env.NODE_ENV === 'test') return next();\n    res.json({status: 'unavailable'});\n  },\n  function(req, res, next){\n    if(!runner.report) return next();\n    res.json(testFilter(runner.report, req.query.type, req.query.n));\n  },\n  function(req, res){\n    runner.on('done', function(report){\n      process.nextTick(() =>  res.json(testFilter(runner.report, req.query.type, req.query.n)));\n    });\n  });\n  app.get('/_api/app-info', function(req, res) {\n    let hs = Object.keys(res._headers)\n      .filter(h => !h.match(/^access-control-\\w+/));\n    let hObj = {};\n    hs.forEach(h => {hObj[h] = res._headers[h]});\n    delete res._headers['strict-transport-security'];\n    res.json({headers: hObj});\n  });\n  \n};\n\nfunction testFilter(tests, type, n) {\n  let out;\n  switch (type) {\n    case 'unit' :\n      out = tests.filter(t => t.context.match('Unit Tests'));\n      break;\n    case 'functional':\n      out = tests.filter(t => t.context.match('Functional Tests') && !t.title.match('#example'));\n      break;\n    default:\n      out = tests;\n  }\n  if(n !== undefined) {\n    return out[n] || out;\n  }\n  return out;\n}"
      ]
    },
    "sourceType": "script",
    "mtime": 1746621611314
  },
  "{\"sourceRoot\":\"C:\\\\Users\\\\27682\\\\Desktop\\\\Local_Projects\\\\Quality_Assurance_and_Testing_with_Chai\\\\Projects\\\\boilerplate-project-sudoku-solver\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\27682\\\\Desktop\\\\Local_Projects\\\\Quality_Assurance_and_Testing_with_Chai\\\\Projects\\\\boilerplate-project-sudoku-solver\",\"filename\":\"C:\\\\Users\\\\27682\\\\Desktop\\\\Local_Projects\\\\Quality_Assurance_and_Testing_with_Chai\\\\Projects\\\\boilerplate-project-sudoku-solver\\\\test-runner.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test\",\"root\":\"C:\\\\Users\\\\27682\\\\Desktop\\\\Local_Projects\\\\Quality_Assurance_and_Testing_with_Chai\\\\Projects\\\\boilerplate-project-sudoku-solver\",\"plugins\":[{\"key\":\"proposal-numeric-separator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"NumericLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-logical-assignment-operators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.11.6:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver",
      "filename": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\test-runner.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "test",
      "root": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-numeric-separator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "NumericLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-logical-assignment-operators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\test-runner.js",
        "plugins": [
          "numericSeparator",
          "logicalAssignment",
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "exportNamespaceFrom",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\test-runner.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\",
        "sourceFileName": "test-runner.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\n/*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*       DO NOT EDIT THIS FILE\n*       For FCC testing purposes!\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*/\nvar analyser = require('./assertion-analyser');\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar Mocha = require('mocha'),\n    fs = require('fs'),\n    path = require('path');\n\nrequire(\"@babel/register\");\n\nvar mocha = new Mocha({\n  timeout: 5000\n});\nvar testDir = './tests'; // Add each .js file to the mocha instance\n\nfs.readdirSync(testDir).filter(function (file) {\n  // Only keep the .js files\n  return file.substr(-3) === '.js';\n}).forEach(function (file) {\n  mocha.addFile(path.join(testDir, file));\n});\nvar emitter = new EventEmitter();\n\nemitter.run = function () {\n  var tests = [];\n  var context = \"\";\n  var separator = ' -> '; // Run the tests.\n\n  try {\n    var runner = mocha.ui('tdd').run().on('test end', function (test) {\n      // remove comments\n      var body = test.body.replace(/\\/\\/.*\\n|\\/\\*.*\\*\\//g, ''); // collapse spaces\n\n      body = body.replace(/\\s+/g, ' ');\n      var obj = {\n        title: test.title,\n        context: context.slice(0, -separator.length),\n        state: test.state,\n        // body: body,\n        assertions: analyser(body)\n      };\n      tests.push(obj);\n    }).on('end', function () {\n      emitter.report = tests;\n      emitter.emit('done', tests);\n    }).on('suite', function (s) {\n      context += s.title + separator;\n    }).on('suite end', function (s) {\n      context = context.slice(0, -(s.title.length + separator.length));\n    });\n  } catch (e) {\n    throw e;\n  }\n};\n\nmodule.exports = emitter;\n/*\n * Mocha.runner Events:\n * can be used to build a better custom report\n *\n *   - `start`  execution started\n *   - `end`  execution complete\n *   - `suite`  (suite) test suite execution started\n *   - `suite end`  (suite) all tests (and sub-suites) have finished\n *   - `test`  (test) test execution started\n *   - `test end`  (test) test completed\n *   - `hook`  (hook) hook execution started\n *   - `hook end`  (hook) hook complete\n *   - `pass`  (test) test passed\n *   - `fail`  (test, err) test failed\n *   - `pending`  (test) test pending\n */\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QtcnVubmVyLmpzIl0sIm5hbWVzIjpbImFuYWx5c2VyIiwicmVxdWlyZSIsIkV2ZW50RW1pdHRlciIsIk1vY2hhIiwiZnMiLCJwYXRoIiwibW9jaGEiLCJ0aW1lb3V0IiwidGVzdERpciIsInJlYWRkaXJTeW5jIiwiZmlsdGVyIiwiZmlsZSIsInN1YnN0ciIsImZvckVhY2giLCJhZGRGaWxlIiwiam9pbiIsImVtaXR0ZXIiLCJydW4iLCJ0ZXN0cyIsImNvbnRleHQiLCJzZXBhcmF0b3IiLCJydW5uZXIiLCJ1aSIsIm9uIiwidGVzdCIsImJvZHkiLCJyZXBsYWNlIiwib2JqIiwidGl0bGUiLCJzbGljZSIsImxlbmd0aCIsInN0YXRlIiwiYXNzZXJ0aW9ucyIsInB1c2giLCJyZXBvcnQiLCJlbWl0IiwicyIsImUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTJCQSxJQUFNQSxRQUFRLEdBQUdDLE9BQU8sQ0FBQyxzQkFBRCxDQUF4Qjs7QUFDQSxJQUFNQyxZQUFZLEdBQUdELE9BQU8sQ0FBQyxRQUFELENBQVAsQ0FBa0JDLFlBQXZDOztBQUVBLElBQU1DLEtBQUssR0FBR0YsT0FBTyxDQUFDLE9BQUQsQ0FBckI7QUFBQSxJQUNJRyxFQUFFLEdBQUdILE9BQU8sQ0FBQyxJQUFELENBRGhCO0FBQUEsSUFFSUksSUFBSSxHQUFHSixPQUFPLENBQUMsTUFBRCxDQUZsQjs7QUFHSUEsT0FBTyxDQUFDLGlCQUFELENBQVA7O0FBRUosSUFBTUssS0FBSyxHQUFHLElBQUlILEtBQUosQ0FBVTtBQUFFSSxFQUFBQSxPQUFPLEVBQUU7QUFBWCxDQUFWLENBQWQ7QUFDQSxJQUFNQyxPQUFPLEdBQUcsU0FBaEIsQyxDQUdBOztBQUNBSixFQUFFLENBQUNLLFdBQUgsQ0FBZUQsT0FBZixFQUF3QkUsTUFBeEIsQ0FBK0IsVUFBU0MsSUFBVCxFQUFjO0FBQ3pDO0FBQ0EsU0FBT0EsSUFBSSxDQUFDQyxNQUFMLENBQVksQ0FBQyxDQUFiLE1BQW9CLEtBQTNCO0FBRUgsQ0FKRCxFQUlHQyxPQUpILENBSVcsVUFBU0YsSUFBVCxFQUFjO0FBQ3JCTCxFQUFBQSxLQUFLLENBQUNRLE9BQU4sQ0FDSVQsSUFBSSxDQUFDVSxJQUFMLENBQVVQLE9BQVYsRUFBbUJHLElBQW5CLENBREo7QUFHSCxDQVJEO0FBVUEsSUFBSUssT0FBTyxHQUFHLElBQUlkLFlBQUosRUFBZDs7QUFDQWMsT0FBTyxDQUFDQyxHQUFSLEdBQWMsWUFBVztBQUV2QixNQUFJQyxLQUFLLEdBQUcsRUFBWjtBQUNBLE1BQUlDLE9BQU8sR0FBRyxFQUFkO0FBQ0EsTUFBSUMsU0FBUyxHQUFHLE1BQWhCLENBSnVCLENBS3ZCOztBQUNBLE1BQUk7QUFDSixRQUFJQyxNQUFNLEdBQUdmLEtBQUssQ0FBQ2dCLEVBQU4sQ0FBUyxLQUFULEVBQWdCTCxHQUFoQixHQUNWTSxFQURVLENBQ1AsVUFETyxFQUNLLFVBQVNDLElBQVQsRUFBZTtBQUMzQjtBQUNBLFVBQUlDLElBQUksR0FBR0QsSUFBSSxDQUFDQyxJQUFMLENBQVVDLE9BQVYsQ0FBa0Isc0JBQWxCLEVBQTBDLEVBQTFDLENBQVgsQ0FGMkIsQ0FHM0I7O0FBQ0FELE1BQUFBLElBQUksR0FBR0EsSUFBSSxDQUFDQyxPQUFMLENBQWEsTUFBYixFQUFvQixHQUFwQixDQUFQO0FBQ0EsVUFBSUMsR0FBRyxHQUFHO0FBQ1JDLFFBQUFBLEtBQUssRUFBRUosSUFBSSxDQUFDSSxLQURKO0FBRVJULFFBQUFBLE9BQU8sRUFBRUEsT0FBTyxDQUFDVSxLQUFSLENBQWMsQ0FBZCxFQUFpQixDQUFDVCxTQUFTLENBQUNVLE1BQTVCLENBRkQ7QUFHUkMsUUFBQUEsS0FBSyxFQUFFUCxJQUFJLENBQUNPLEtBSEo7QUFJUjtBQUNBQyxRQUFBQSxVQUFVLEVBQUVoQyxRQUFRLENBQUN5QixJQUFEO0FBTFosT0FBVjtBQU9BUCxNQUFBQSxLQUFLLENBQUNlLElBQU4sQ0FBV04sR0FBWDtBQUNILEtBZFUsRUFlVkosRUFmVSxDQWVQLEtBZk8sRUFlQSxZQUFXO0FBQ2xCUCxNQUFBQSxPQUFPLENBQUNrQixNQUFSLEdBQWlCaEIsS0FBakI7QUFDQUYsTUFBQUEsT0FBTyxDQUFDbUIsSUFBUixDQUFhLE1BQWIsRUFBcUJqQixLQUFyQjtBQUNILEtBbEJVLEVBbUJWSyxFQW5CVSxDQW1CUCxPQW5CTyxFQW1CRSxVQUFTYSxDQUFULEVBQVk7QUFDdkJqQixNQUFBQSxPQUFPLElBQUtpQixDQUFDLENBQUNSLEtBQUYsR0FBVVIsU0FBdEI7QUFFRCxLQXRCVSxFQXVCVkcsRUF2QlUsQ0F1QlAsV0F2Qk8sRUF1Qk0sVUFBU2EsQ0FBVCxFQUFZO0FBQzNCakIsTUFBQUEsT0FBTyxHQUFHQSxPQUFPLENBQUNVLEtBQVIsQ0FBYyxDQUFkLEVBQWlCLEVBQUVPLENBQUMsQ0FBQ1IsS0FBRixDQUFRRSxNQUFSLEdBQWlCVixTQUFTLENBQUNVLE1BQTdCLENBQWpCLENBQVY7QUFDRCxLQXpCVSxDQUFiO0FBMEJDLEdBM0JELENBMkJFLE9BQU1PLENBQU4sRUFBUztBQUNULFVBQU1BLENBQU47QUFDRDtBQUNGLENBcENEOztBQXNDQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCdkIsT0FBakI7QUFFQSIsInNvdXJjZVJvb3QiOiJDOlxcVXNlcnNcXDI3NjgyXFxEZXNrdG9wXFxMb2NhbF9Qcm9qZWN0c1xcUXVhbGl0eV9Bc3N1cmFuY2VfYW5kX1Rlc3Rpbmdfd2l0aF9DaGFpXFxQcm9qZWN0c1xcYm9pbGVycGxhdGUtcHJvamVjdC1zdWRva3Utc29sdmVyXFwiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuKlxuKlxuKlxuKlxuKlxuKlxuKlxuKlxuKlxuKlxuKlxuKiAgICAgICBETyBOT1QgRURJVCBUSElTIEZJTEVcbiogICAgICAgRm9yIEZDQyB0ZXN0aW5nIHB1cnBvc2VzIVxuKlxuKlxuKlxuKlxuKlxuKlxuKlxuKlxuKlxuKlxuKlxuKi9cblxuY29uc3QgYW5hbHlzZXIgPSByZXF1aXJlKCcuL2Fzc2VydGlvbi1hbmFseXNlcicpO1xuY29uc3QgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xuXG5jb25zdCBNb2NoYSA9IHJlcXVpcmUoJ21vY2hhJyksXG4gICAgZnMgPSByZXF1aXJlKCdmcycpLFxuICAgIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG4gICAgcmVxdWlyZShcIkBiYWJlbC9yZWdpc3RlclwiKTtcblxuY29uc3QgbW9jaGEgPSBuZXcgTW9jaGEoeyB0aW1lb3V0OiA1MDAwIH0pO1xuY29uc3QgdGVzdERpciA9ICcuL3Rlc3RzJ1xuXG5cbi8vIEFkZCBlYWNoIC5qcyBmaWxlIHRvIHRoZSBtb2NoYSBpbnN0YW5jZVxuZnMucmVhZGRpclN5bmModGVzdERpcikuZmlsdGVyKGZ1bmN0aW9uKGZpbGUpe1xuICAgIC8vIE9ubHkga2VlcCB0aGUgLmpzIGZpbGVzXG4gICAgcmV0dXJuIGZpbGUuc3Vic3RyKC0zKSA9PT0gJy5qcyc7XG5cbn0pLmZvckVhY2goZnVuY3Rpb24oZmlsZSl7XG4gICAgbW9jaGEuYWRkRmlsZShcbiAgICAgICAgcGF0aC5qb2luKHRlc3REaXIsIGZpbGUpXG4gICAgKTtcbn0pO1xuXG5sZXQgZW1pdHRlciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbmVtaXR0ZXIucnVuID0gZnVuY3Rpb24oKSB7XG5cbiAgbGV0IHRlc3RzID0gW107XG4gIGxldCBjb250ZXh0ID0gXCJcIjtcbiAgbGV0IHNlcGFyYXRvciA9ICcgLT4gJztcbiAgLy8gUnVuIHRoZSB0ZXN0cy5cbiAgdHJ5IHtcbiAgbGV0IHJ1bm5lciA9IG1vY2hhLnVpKCd0ZGQnKS5ydW4oKVxuICAgIC5vbigndGVzdCBlbmQnLCBmdW5jdGlvbih0ZXN0KSB7XG4gICAgICAgIC8vIHJlbW92ZSBjb21tZW50c1xuICAgICAgICBsZXQgYm9keSA9IHRlc3QuYm9keS5yZXBsYWNlKC9cXC9cXC8uKlxcbnxcXC9cXCouKlxcKlxcLy9nLCAnJyk7XG4gICAgICAgIC8vIGNvbGxhcHNlIHNwYWNlc1xuICAgICAgICBib2R5ID0gYm9keS5yZXBsYWNlKC9cXHMrL2csJyAnKTtcbiAgICAgICAgbGV0IG9iaiA9IHtcbiAgICAgICAgICB0aXRsZTogdGVzdC50aXRsZSxcbiAgICAgICAgICBjb250ZXh0OiBjb250ZXh0LnNsaWNlKDAsIC1zZXBhcmF0b3IubGVuZ3RoKSxcbiAgICAgICAgICBzdGF0ZTogdGVzdC5zdGF0ZSxcbiAgICAgICAgICAvLyBib2R5OiBib2R5LFxuICAgICAgICAgIGFzc2VydGlvbnM6IGFuYWx5c2VyKGJvZHkpXG4gICAgICAgIH07XG4gICAgICAgIHRlc3RzLnB1c2gob2JqKTtcbiAgICB9KVxuICAgIC5vbignZW5kJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGVtaXR0ZXIucmVwb3J0ID0gdGVzdHM7XG4gICAgICAgIGVtaXR0ZXIuZW1pdCgnZG9uZScsIHRlc3RzKVxuICAgIH0pXG4gICAgLm9uKCdzdWl0ZScsIGZ1bmN0aW9uKHMpIHtcbiAgICAgIGNvbnRleHQgKz0gKHMudGl0bGUgKyBzZXBhcmF0b3IpO1xuXG4gICAgfSlcbiAgICAub24oJ3N1aXRlIGVuZCcsIGZ1bmN0aW9uKHMpIHtcbiAgICAgIGNvbnRleHQgPSBjb250ZXh0LnNsaWNlKDAsIC0ocy50aXRsZS5sZW5ndGggKyBzZXBhcmF0b3IubGVuZ3RoKSlcbiAgICB9KVxuICB9IGNhdGNoKGUpIHtcbiAgICB0aHJvdyhlKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBlbWl0dGVyO1xuXG4vKlxuICogTW9jaGEucnVubmVyIEV2ZW50czpcbiAqIGNhbiBiZSB1c2VkIHRvIGJ1aWxkIGEgYmV0dGVyIGN1c3RvbSByZXBvcnRcbiAqXG4gKiAgIC0gYHN0YXJ0YCAgZXhlY3V0aW9uIHN0YXJ0ZWRcbiAqICAgLSBgZW5kYCAgZXhlY3V0aW9uIGNvbXBsZXRlXG4gKiAgIC0gYHN1aXRlYCAgKHN1aXRlKSB0ZXN0IHN1aXRlIGV4ZWN1dGlvbiBzdGFydGVkXG4gKiAgIC0gYHN1aXRlIGVuZGAgIChzdWl0ZSkgYWxsIHRlc3RzIChhbmQgc3ViLXN1aXRlcykgaGF2ZSBmaW5pc2hlZFxuICogICAtIGB0ZXN0YCAgKHRlc3QpIHRlc3QgZXhlY3V0aW9uIHN0YXJ0ZWRcbiAqICAgLSBgdGVzdCBlbmRgICAodGVzdCkgdGVzdCBjb21wbGV0ZWRcbiAqICAgLSBgaG9va2AgIChob29rKSBob29rIGV4ZWN1dGlvbiBzdGFydGVkXG4gKiAgIC0gYGhvb2sgZW5kYCAgKGhvb2spIGhvb2sgY29tcGxldGVcbiAqICAgLSBgcGFzc2AgICh0ZXN0KSB0ZXN0IHBhc3NlZFxuICogICAtIGBmYWlsYCAgKHRlc3QsIGVycikgdGVzdCBmYWlsZWRcbiAqICAgLSBgcGVuZGluZ2AgICh0ZXN0KSB0ZXN0IHBlbmRpbmdcbiAqLyJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "test-runner.js"
      ],
      "names": [
        "analyser",
        "require",
        "EventEmitter",
        "Mocha",
        "fs",
        "path",
        "mocha",
        "timeout",
        "testDir",
        "readdirSync",
        "filter",
        "file",
        "substr",
        "forEach",
        "addFile",
        "join",
        "emitter",
        "run",
        "tests",
        "context",
        "separator",
        "runner",
        "ui",
        "on",
        "test",
        "body",
        "replace",
        "obj",
        "title",
        "slice",
        "length",
        "state",
        "assertions",
        "push",
        "report",
        "emit",
        "s",
        "e",
        "module",
        "exports"
      ],
      "mappings": ";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,sBAAD,CAAxB;;AACA,IAAMC,YAAY,GAAGD,OAAO,CAAC,QAAD,CAAP,CAAkBC,YAAvC;;AAEA,IAAMC,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;AAAA,IACIG,EAAE,GAAGH,OAAO,CAAC,IAAD,CADhB;AAAA,IAEII,IAAI,GAAGJ,OAAO,CAAC,MAAD,CAFlB;;AAGIA,OAAO,CAAC,iBAAD,CAAP;;AAEJ,IAAMK,KAAK,GAAG,IAAIH,KAAJ,CAAU;AAAEI,EAAAA,OAAO,EAAE;AAAX,CAAV,CAAd;AACA,IAAMC,OAAO,GAAG,SAAhB,C,CAGA;;AACAJ,EAAE,CAACK,WAAH,CAAeD,OAAf,EAAwBE,MAAxB,CAA+B,UAASC,IAAT,EAAc;AACzC;AACA,SAAOA,IAAI,CAACC,MAAL,CAAY,CAAC,CAAb,MAAoB,KAA3B;AAEH,CAJD,EAIGC,OAJH,CAIW,UAASF,IAAT,EAAc;AACrBL,EAAAA,KAAK,CAACQ,OAAN,CACIT,IAAI,CAACU,IAAL,CAAUP,OAAV,EAAmBG,IAAnB,CADJ;AAGH,CARD;AAUA,IAAIK,OAAO,GAAG,IAAId,YAAJ,EAAd;;AACAc,OAAO,CAACC,GAAR,GAAc,YAAW;AAEvB,MAAIC,KAAK,GAAG,EAAZ;AACA,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIC,SAAS,GAAG,MAAhB,CAJuB,CAKvB;;AACA,MAAI;AACJ,QAAIC,MAAM,GAAGf,KAAK,CAACgB,EAAN,CAAS,KAAT,EAAgBL,GAAhB,GACVM,EADU,CACP,UADO,EACK,UAASC,IAAT,EAAe;AAC3B;AACA,UAAIC,IAAI,GAAGD,IAAI,CAACC,IAAL,CAAUC,OAAV,CAAkB,sBAAlB,EAA0C,EAA1C,CAAX,CAF2B,CAG3B;;AACAD,MAAAA,IAAI,GAAGA,IAAI,CAACC,OAAL,CAAa,MAAb,EAAoB,GAApB,CAAP;AACA,UAAIC,GAAG,GAAG;AACRC,QAAAA,KAAK,EAAEJ,IAAI,CAACI,KADJ;AAERT,QAAAA,OAAO,EAAEA,OAAO,CAACU,KAAR,CAAc,CAAd,EAAiB,CAACT,SAAS,CAACU,MAA5B,CAFD;AAGRC,QAAAA,KAAK,EAAEP,IAAI,CAACO,KAHJ;AAIR;AACAC,QAAAA,UAAU,EAAEhC,QAAQ,CAACyB,IAAD;AALZ,OAAV;AAOAP,MAAAA,KAAK,CAACe,IAAN,CAAWN,GAAX;AACH,KAdU,EAeVJ,EAfU,CAeP,KAfO,EAeA,YAAW;AAClBP,MAAAA,OAAO,CAACkB,MAAR,GAAiBhB,KAAjB;AACAF,MAAAA,OAAO,CAACmB,IAAR,CAAa,MAAb,EAAqBjB,KAArB;AACH,KAlBU,EAmBVK,EAnBU,CAmBP,OAnBO,EAmBE,UAASa,CAAT,EAAY;AACvBjB,MAAAA,OAAO,IAAKiB,CAAC,CAACR,KAAF,GAAUR,SAAtB;AAED,KAtBU,EAuBVG,EAvBU,CAuBP,WAvBO,EAuBM,UAASa,CAAT,EAAY;AAC3BjB,MAAAA,OAAO,GAAGA,OAAO,CAACU,KAAR,CAAc,CAAd,EAAiB,EAAEO,CAAC,CAACR,KAAF,CAAQE,MAAR,GAAiBV,SAAS,CAACU,MAA7B,CAAjB,CAAV;AACD,KAzBU,CAAb;AA0BC,GA3BD,CA2BE,OAAMO,CAAN,EAAS;AACT,UAAMA,CAAN;AACD;AACF,CApCD;;AAsCAC,MAAM,CAACC,OAAP,GAAiBvB,OAAjB;AAEA",
      "sourceRoot": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\",
      "sourcesContent": [
        "/*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*       DO NOT EDIT THIS FILE\n*       For FCC testing purposes!\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*/\n\nconst analyser = require('./assertion-analyser');\nconst EventEmitter = require('events').EventEmitter;\n\nconst Mocha = require('mocha'),\n    fs = require('fs'),\n    path = require('path');\n    require(\"@babel/register\");\n\nconst mocha = new Mocha({ timeout: 5000 });\nconst testDir = './tests'\n\n\n// Add each .js file to the mocha instance\nfs.readdirSync(testDir).filter(function(file){\n    // Only keep the .js files\n    return file.substr(-3) === '.js';\n\n}).forEach(function(file){\n    mocha.addFile(\n        path.join(testDir, file)\n    );\n});\n\nlet emitter = new EventEmitter();\nemitter.run = function() {\n\n  let tests = [];\n  let context = \"\";\n  let separator = ' -> ';\n  // Run the tests.\n  try {\n  let runner = mocha.ui('tdd').run()\n    .on('test end', function(test) {\n        // remove comments\n        let body = test.body.replace(/\\/\\/.*\\n|\\/\\*.*\\*\\//g, '');\n        // collapse spaces\n        body = body.replace(/\\s+/g,' ');\n        let obj = {\n          title: test.title,\n          context: context.slice(0, -separator.length),\n          state: test.state,\n          // body: body,\n          assertions: analyser(body)\n        };\n        tests.push(obj);\n    })\n    .on('end', function() {\n        emitter.report = tests;\n        emitter.emit('done', tests)\n    })\n    .on('suite', function(s) {\n      context += (s.title + separator);\n\n    })\n    .on('suite end', function(s) {\n      context = context.slice(0, -(s.title.length + separator.length))\n    })\n  } catch(e) {\n    throw(e);\n  }\n};\n\nmodule.exports = emitter;\n\n/*\n * Mocha.runner Events:\n * can be used to build a better custom report\n *\n *   - `start`  execution started\n *   - `end`  execution complete\n *   - `suite`  (suite) test suite execution started\n *   - `suite end`  (suite) all tests (and sub-suites) have finished\n *   - `test`  (test) test execution started\n *   - `test end`  (test) test completed\n *   - `hook`  (hook) hook execution started\n *   - `hook end`  (hook) hook complete\n *   - `pass`  (test) test passed\n *   - `fail`  (test, err) test failed\n *   - `pending`  (test) test pending\n */"
      ]
    },
    "sourceType": "script",
    "mtime": 1746621611408
  },
  "{\"sourceRoot\":\"C:\\\\Users\\\\27682\\\\Desktop\\\\Local_Projects\\\\Quality_Assurance_and_Testing_with_Chai\\\\Projects\\\\boilerplate-project-sudoku-solver\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\27682\\\\Desktop\\\\Local_Projects\\\\Quality_Assurance_and_Testing_with_Chai\\\\Projects\\\\boilerplate-project-sudoku-solver\",\"filename\":\"C:\\\\Users\\\\27682\\\\Desktop\\\\Local_Projects\\\\Quality_Assurance_and_Testing_with_Chai\\\\Projects\\\\boilerplate-project-sudoku-solver\\\\assertion-analyser.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test\",\"root\":\"C:\\\\Users\\\\27682\\\\Desktop\\\\Local_Projects\\\\Quality_Assurance_and_Testing_with_Chai\\\\Projects\\\\boilerplate-project-sudoku-solver\",\"plugins\":[{\"key\":\"proposal-numeric-separator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"NumericLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-logical-assignment-operators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.11.6:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver",
      "filename": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\assertion-analyser.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "test",
      "root": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-numeric-separator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "NumericLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-logical-assignment-operators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\assertion-analyser.js",
        "plugins": [
          "numericSeparator",
          "logicalAssignment",
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "exportNamespaceFrom",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\assertion-analyser.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\",
        "sourceFileName": "assertion-analyser.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\n/*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*       DO NOT EDIT THIS FILE\n*       For FCC testing purposes!\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*/\nfunction objParser(str, init) {\n  // finds objects, arrays, strings, and function arguments\n  // between parens, because they may contain ','\n  var openSym = ['[', '{', '\"', \"'\", '('];\n  var closeSym = [']', '}', '\"', \"'\", ')'];\n  var type;\n  var i;\n\n  for (i = init || 0; i < str.length; i++) {\n    type = openSym.indexOf(str[i]);\n    if (type !== -1) break;\n  }\n\n  if (type === -1) return null;\n  var open = openSym[type];\n  var close = closeSym[type];\n  var count = 1;\n  var k;\n\n  for (k = i + 1; k < str.length; k++) {\n    if (open === '\"' || open === \"'\") {\n      if (str[k] === close) count--;\n      if (str[k] === '\\\\') k++;\n    } else {\n      if (str[k] === open) count++;\n      if (str[k] === close) count--;\n    }\n\n    if (count === 0) break;\n  }\n\n  if (count !== 0) return null;\n  var obj = str.slice(i, k + 1);\n  return {\n    start: i,\n    end: k,\n    obj: obj\n  };\n}\n\nfunction replacer(str) {\n  // replace objects with a symbol ( __#n)\n  var obj;\n  var cnt = 0;\n  var data = [];\n\n  while (obj = objParser(str)) {\n    data[cnt] = obj.obj;\n    str = str.substring(0, obj.start) + '__#' + cnt++ + str.substring(obj.end + 1);\n  }\n\n  return {\n    str: str,\n    dictionary: data\n  };\n}\n\nfunction splitter(str) {\n  // split on commas, then restore the objects\n  var strObj = replacer(str);\n  var args = strObj.str.split(',');\n  args = args.map(function (a) {\n    var m = a.match(/__#(\\d+)/);\n\n    while (m) {\n      a = a.replace(/__#(\\d+)/, strObj.dictionary[m[1]]);\n      m = a.match(/__#(\\d+)/);\n    }\n\n    return a.trim();\n  });\n  return args;\n}\n\nfunction assertionAnalyser(body) {\n  // already filtered in the test runner\n  // // remove comments\n  // body = body.replace(/\\/\\/.*\\n|\\/\\*.*\\*\\//g, '');\n  // // get test function body\n  // body = body.match(/\\{\\s*([\\s\\S]*)\\}\\s*$/)[1];\n  if (!body) return \"invalid assertion\"; // replace assertions bodies, so that they cannot\n  // contain the word 'assertion'\n\n  var cleanedBody = body.match(/(?:browser\\s*\\.\\s*)?assert\\s*\\.\\s*\\w*\\([\\s\\S]*\\)/);\n\n  if (cleanedBody && Array.isArray(cleanedBody)) {\n    body = cleanedBody[0];\n  } else {\n    // No assertions present\n    return [];\n  }\n\n  var s = replacer(body); // split on 'assertion'\n\n  var splittedAssertions = s.str.split('assert');\n  var assertions = splittedAssertions.slice(1); // match the METHODS\n\n  var assertionBodies = [];\n  var methods = assertions.map(function (a, i) {\n    var m = a.match(/^\\s*\\.\\s*(\\w+)__#(\\d+)/);\n    assertionBodies.push(parseInt(m[2]));\n    var pre = splittedAssertions[i].match(/browser\\s*\\.\\s*/) ? 'browser.' : '';\n    return pre + m[1];\n  });\n  if (methods.some(function (m) {\n    return !m;\n  })) return \"invalid assertion\"; // remove parens from the assertions bodies\n\n  var bodies = assertionBodies.map(function (b) {\n    return s.dictionary[b].slice(1, -1).trim();\n  });\n  assertions = methods.map(function (m, i) {\n    return {\n      method: m,\n      args: splitter(bodies[i]) //replace objects, split on ',' ,then restore objects\n\n    };\n  });\n  return assertions;\n}\n\nmodule.exports = assertionAnalyser;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "assertion-analyser.js"
      ],
      "names": [
        "objParser",
        "str",
        "init",
        "openSym",
        "closeSym",
        "type",
        "i",
        "length",
        "indexOf",
        "open",
        "close",
        "count",
        "k",
        "obj",
        "slice",
        "start",
        "end",
        "replacer",
        "cnt",
        "data",
        "substring",
        "dictionary",
        "splitter",
        "strObj",
        "args",
        "split",
        "map",
        "a",
        "m",
        "match",
        "replace",
        "trim",
        "assertionAnalyser",
        "body",
        "cleanedBody",
        "Array",
        "isArray",
        "s",
        "splittedAssertions",
        "assertions",
        "assertionBodies",
        "methods",
        "push",
        "parseInt",
        "pre",
        "some",
        "bodies",
        "b",
        "method",
        "module",
        "exports"
      ],
      "mappings": "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",
      "sourceRoot": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\",
      "sourcesContent": [
        "/*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*       DO NOT EDIT THIS FILE\n*       For FCC testing purposes!\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*/\n\nfunction objParser(str, init) {\n  // finds objects, arrays, strings, and function arguments\n  // between parens, because they may contain ','\n  let openSym = ['[', '{', '\"', \"'\", '('];\n  let closeSym = [']', '}', '\"', \"'\", ')'];\n  let type;\n  let i;\n  for(i = (init || 0); i < str.length; i++ ) {\n    type = openSym.indexOf(str[i]);\n    if( type !== -1)  break;\n  }\n  if (type === -1) return null;\n  let open = openSym[type];\n  let close = closeSym[type];\n  let count = 1;\n  let k;\n  for(k = i+1; k < str.length; k++) {\n    if(open === '\"' || open === \"'\") {\n      if(str[k] === close) count--;\n      if(str[k] === '\\\\') k++;\n    } else {\n      if(str[k] === open) count++;\n      if(str[k] === close) count--;\n    }\n    if(count === 0) break;\n  }\n  if(count !== 0) return null;\n  let obj = str.slice(i, k+1);\n  return {\n    start : i,\n    end: k,\n    obj: obj\n  };\n}\n\nfunction replacer(str) {\n  // replace objects with a symbol ( __#n)\n  let obj;\n  let cnt = 0;\n  let data = [];\n  while(obj = objParser(str)) {\n    data[cnt] = obj.obj;\n    str = str.substring(0, obj.start) + '__#' + cnt++ + str.substring(obj.end+1)\n  }\n  return {\n    str : str,\n    dictionary : data\n  }\n}\n\nfunction splitter(str) {\n  // split on commas, then restore the objects\n  let strObj = replacer(str);\n  let args = strObj.str.split(',');\n  args = args.map(function(a){\n    let m = a.match(/__#(\\d+)/);\n    while (m) {\n      a = a.replace(/__#(\\d+)/, strObj.dictionary[m[1]]);\n      m = a.match(/__#(\\d+)/);\n    }\n    return a.trim();\n  })\n  return args;\n}\n\nfunction assertionAnalyser(body) {\n  \n  // already filtered in the test runner\n  // // remove comments\n  // body = body.replace(/\\/\\/.*\\n|\\/\\*.*\\*\\//g, '');\n  // // get test function body\n  // body = body.match(/\\{\\s*([\\s\\S]*)\\}\\s*$/)[1];\n  \n  if(!body) return \"invalid assertion\";\n  // replace assertions bodies, so that they cannot\n  // contain the word 'assertion'\n\n  let cleanedBody = body.match(/(?:browser\\s*\\.\\s*)?assert\\s*\\.\\s*\\w*\\([\\s\\S]*\\)/)\n  if(cleanedBody && Array.isArray(cleanedBody)) {\n    body = cleanedBody[0];\n  } else {\n    // No assertions present\n    return [];\n  }\n  let s = replacer(body);\n  // split on 'assertion'\n  let splittedAssertions = s.str.split('assert');\n  let assertions = splittedAssertions.slice(1);\n  // match the METHODS\n\n  let assertionBodies = [];\n  let methods = assertions.map(function(a, i){\n    let m = a.match(/^\\s*\\.\\s*(\\w+)__#(\\d+)/);\n    assertionBodies.push(parseInt(m[2]));\n    let pre = splittedAssertions[i].match(/browser\\s*\\.\\s*/) ? 'browser.' : '';\n    return pre + m[1];\n  });\n  if(methods.some(function(m){ return !m })) return \"invalid assertion\";\n  // remove parens from the assertions bodies\n  let bodies = assertionBodies.map(function(b){\n    return s.dictionary[b].slice(1,-1).trim();\n  });\n  assertions = methods.map(function(m, i) {\n    return {\n      method: m,\n      args: splitter(bodies[i]) //replace objects, split on ',' ,then restore objects\n    }\n  })\n  return assertions;\n}\n\nmodule.exports = assertionAnalyser;\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1746621610909
  },
  "{\"sourceRoot\":\"C:\\\\Users\\\\27682\\\\Desktop\\\\Local_Projects\\\\Quality_Assurance_and_Testing_with_Chai\\\\Projects\\\\boilerplate-project-sudoku-solver\\\\routes\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\27682\\\\Desktop\\\\Local_Projects\\\\Quality_Assurance_and_Testing_with_Chai\\\\Projects\\\\boilerplate-project-sudoku-solver\",\"filename\":\"C:\\\\Users\\\\27682\\\\Desktop\\\\Local_Projects\\\\Quality_Assurance_and_Testing_with_Chai\\\\Projects\\\\boilerplate-project-sudoku-solver\\\\routes\\\\api.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test\",\"root\":\"C:\\\\Users\\\\27682\\\\Desktop\\\\Local_Projects\\\\Quality_Assurance_and_Testing_with_Chai\\\\Projects\\\\boilerplate-project-sudoku-solver\",\"plugins\":[{\"key\":\"proposal-numeric-separator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"NumericLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-logical-assignment-operators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.11.6:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\routes\\",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver",
      "filename": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\routes\\api.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "test",
      "root": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-numeric-separator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "NumericLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-logical-assignment-operators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\routes\\api.js",
        "plugins": [
          "numericSeparator",
          "logicalAssignment",
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "exportNamespaceFrom",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\routes\\api.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\routes\\",
        "sourceFileName": "api.js"
      }
    },
    "ast": null,
    "code": "'use strict';\n\nvar SudokuSolver = require('../controllers/sudoku-solver.js');\n\nvar sudokuObject = new SudokuSolver();\n\nmodule.exports = function (app) {\n  app.route('/api/check').post(function (req, res) {\n    if (req.body.puzzle && req.body.coordinate && req.body.value) {\n      var puzzleString = req.body.puzzle;\n      console.log(puzzleString);\n      var value = req.body.value; //  console.log(value)\n\n      var coordinate = req.body.coordinate; //  console.log(coordinate);\n\n      var coordinateRegExp = /^[A-I][123456789]$/;\n      var valueRegExp = /^[123456789]$/;\n      var puzzleRegExp = /^[123456789.]*$/;\n\n      if (!value.match(valueRegExp)) {\n        res.json({\n          \"error\": \"Invalid value\"\n        });\n      } else if (!coordinate.match(coordinateRegExp)) {\n        res.json({\n          \"error\": \"Invalid coordinate\"\n        });\n      } else if (!puzzleString.match(puzzleRegExp)) {\n        res.json({\n          \"error\": \"Invalid characters in puzzle\"\n        });\n      } else if (!sudokuObject.validate(puzzleString)) {\n        res.json({\n          \"error\": \"Expected puzzle to be 81 characters long\"\n        });\n      } else if (puzzleString.length === 81 && puzzleString.match(puzzleRegExp) && coordinate.match(coordinateRegExp) && value.match(valueRegExp)) {\n        // Continue with what is required in this endpoint.\n        var ROW = coordinate[0];\n        var rowIndex = -1;\n\n        switch (ROW) {\n          case 'A':\n            rowIndex = 0;\n            break;\n\n          case 'B':\n            rowIndex = 1;\n            break;\n\n          case 'C':\n            rowIndex = 2;\n            break;\n\n          case 'D':\n            rowIndex = 3;\n            break;\n\n          case 'E':\n            rowIndex = 4;\n            break;\n\n          case 'F':\n            rowIndex = 5;\n            break;\n\n          case 'G':\n            rowIndex = 6;\n            break;\n\n          case 'H':\n            rowIndex = 7;\n            break;\n\n          case 'I':\n            rowIndex = 8;\n            break;\n        }\n\n        var colIndex = parseInt(coordinate[1]) - 1; // Check if the value is already in the board\n\n        var placedBoard = sudokuObject.createBoard(puzzleString);\n\n        if (placedBoard[rowIndex][colIndex] === parseInt(value)) {\n          res.json({\n            \"valid\": true\n          });\n        } else {\n          var rowClash = sudokuObject.checkRowPlacement(puzzleString, rowIndex, colIndex, value); //console.log(\"row:\", rowClash);\n\n          var colClash = sudokuObject.checkColPlacement(puzzleString, rowIndex, colIndex, value); //console.log(\"col:\", colClash);\n\n          var subGridsClash = sudokuObject.checkRegionPlacement(puzzleString, rowIndex, colIndex, value); //console.log(\"box:\", subGridsClash);\n\n          var clashes = [];\n\n          if (rowClash) {\n            clashes.push(\"row\");\n          }\n\n          if (colClash) {\n            clashes.push(\"column\");\n          }\n\n          if (subGridsClash) {\n            clashes.push(\"region\");\n          }\n\n          if (clashes.length === 0) {\n            res.json({\n              \"valid\": true\n            });\n          } else {\n            res.json({\n              \"valid\": false,\n              \"conflict\": clashes\n            });\n          }\n        } // end of checks\n\n      }\n    } else {\n      res.json({\n        \"error\": \"Required field(s) missing\"\n      });\n    }\n  });\n  app.route('/api/solve').post(function (req, res) {\n    if (!req.body.puzzle) {\n      res.json({\n        \"error\": \"Required field missing\"\n      });\n    } else {\n      var solveString = req.body.puzzle;\n      var regEx = /^[123456789.]*$/;\n\n      if (solveString.match(regEx)) {\n        var inputLength = sudokuObject.validate(solveString);\n\n        if (!inputLength) {\n          res.json({\n            \"error\": \"Expected puzzle to be 81 characters long\"\n          });\n        } else {\n          // Replace . with 0\n          var sudokuBoard = sudokuObject.createBoard(solveString);\n          var sudokuSolution = sudokuObject.solve(sudokuBoard);\n\n          if (sudokuSolution.indexOf(\".\") === -1) {\n            res.json({\n              \"solution\": sudokuSolution\n            });\n          } else {\n            res.json({\n              \"error\": \"Puzzle cannot be solved\"\n            });\n          }\n        }\n      } else {\n        res.json({\n          \"error\": \"Invalid characters in puzzle\"\n        });\n      }\n    }\n  });\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "api.js"
      ],
      "names": [
        "SudokuSolver",
        "require",
        "sudokuObject",
        "module",
        "exports",
        "app",
        "route",
        "post",
        "req",
        "res",
        "body",
        "puzzle",
        "coordinate",
        "value",
        "puzzleString",
        "console",
        "log",
        "coordinateRegExp",
        "valueRegExp",
        "puzzleRegExp",
        "match",
        "json",
        "validate",
        "length",
        "ROW",
        "rowIndex",
        "colIndex",
        "parseInt",
        "placedBoard",
        "createBoard",
        "rowClash",
        "checkRowPlacement",
        "colClash",
        "checkColPlacement",
        "subGridsClash",
        "checkRegionPlacement",
        "clashes",
        "push",
        "solveString",
        "regEx",
        "inputLength",
        "sudokuBoard",
        "sudokuSolution",
        "solve",
        "indexOf"
      ],
      "mappings": "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",
      "sourceRoot": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\routes\\",
      "sourcesContent": [
        "'use strict';\n\nconst SudokuSolver = require('../controllers/sudoku-solver.js');\nconst sudokuObject = new SudokuSolver();\n\nmodule.exports =  function (app) {\n\n  app.route('/api/check')\n    .post((req, res) => {\n      if (req.body.puzzle && req.body.coordinate && req.body.value) {\n        const puzzleString = req.body.puzzle;\n        console.log(puzzleString);\n        const value = req.body.value;\n        //  console.log(value)\n        const coordinate = req.body.coordinate;\n        //  console.log(coordinate);\n\n        const coordinateRegExp = /^[A-I][123456789]$/;\n        const valueRegExp = /^[123456789]$/;\n        const puzzleRegExp = /^[123456789.]*$/;\n\n        if ( !value.match(valueRegExp) ) {\n          res.json({\n            \"error\":\"Invalid value\"\n          });\n        } else if (!coordinate.match(coordinateRegExp)) {\n          res.json({\n            \"error\":\"Invalid coordinate\"\n          });\n        } else if (!puzzleString.match(puzzleRegExp)) {\n          res.json({\n            \"error\": \"Invalid characters in puzzle\"\n          });\n        } else if (!sudokuObject.validate(puzzleString)){\n          res.json({\n            \"error\":\"Expected puzzle to be 81 characters long\"\n          });\n        } else if ( (puzzleString.length === 81) && (puzzleString.match(puzzleRegExp)) && (coordinate.match(coordinateRegExp)) && (value.match(valueRegExp))){\n          // Continue with what is required in this endpoint.\n        const ROW = coordinate[0];\n        let rowIndex = -1;\n\n        switch(ROW){\n          case 'A':\n            rowIndex = 0;\n            break;\n          case 'B':\n            rowIndex = 1;\n            break;\n          case 'C':\n            rowIndex = 2;\n            break;\n          case 'D':\n            rowIndex = 3;\n            break;\n          case 'E':\n            rowIndex = 4;\n            break;\n          case 'F':\n              rowIndex = 5;\n              break;\n          case 'G':\n              rowIndex = 6;\n              break;\n          case 'H':\n              rowIndex = 7;\n              break;\n          case 'I':\n              rowIndex = 8;\n              break;\n        }\n        let colIndex = parseInt(coordinate[1]) - 1;\n\n        // Check if the value is already in the board\n        const placedBoard = sudokuObject.createBoard(puzzleString);\n        if (placedBoard[rowIndex][colIndex] === parseInt(value)){\n          res.json({\n            \"valid\": true\n          });\n        } else {\n          const rowClash = sudokuObject.checkRowPlacement(puzzleString, rowIndex, colIndex, value);\n        //console.log(\"row:\", rowClash);\n        const colClash = sudokuObject.checkColPlacement(puzzleString, rowIndex, colIndex, value);\n        //console.log(\"col:\", colClash);\n        const subGridsClash = sudokuObject.checkRegionPlacement(puzzleString, rowIndex, colIndex, value);\n        //console.log(\"box:\", subGridsClash);\n        let clashes = []\n\n        if (rowClash){\n          clashes.push(\"row\");\n        } \n        if (colClash){\n          clashes.push(\"column\");\n        }\n        if (subGridsClash){\n          clashes.push(\"region\");\n        }\n\n        if (clashes.length === 0){\n          res.json({\n            \"valid\": true\n          });\n        } else {\n          res.json({\n            \"valid\": false,\n            \"conflict\": clashes\n          });\n        }\n      }\n      // end of checks\n      }\n\n      } else {\n        res.json({\n          \"error\":\"Required field(s) missing\"\n        })\n      }\n\n    });\n    \n  app.route('/api/solve')\n    .post((req, res) => {\n      if (!req.body.puzzle) {\n        res.json({\n          \"error\":\"Required field missing\"\n        });\n      } else {\n        const solveString = req.body.puzzle;\n        const regEx = /^[123456789.]*$/;\n        if (solveString.match(regEx)){\n          const inputLength = sudokuObject.validate(solveString);\n          if (!inputLength) {\n            res.json({\n              \"error\": \"Expected puzzle to be 81 characters long\"\n            });\n          } else {\n              // Replace . with 0\n              let sudokuBoard = sudokuObject.createBoard(solveString);\n              const sudokuSolution = sudokuObject.solve(sudokuBoard);\n              if ( sudokuSolution.indexOf(\".\") === -1 ){\n                res.json({\n                  \"solution\": sudokuSolution\n                });\n              } else {\n                res.json({\n                  \"error\": \"Puzzle cannot be solved\"\n                });\n              }\n              \n          }\n        } else {\n          res.json({\n            \"error\": \"Invalid characters in puzzle\"\n          });\n        }\n      }\n      \n    });\n};\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1749070438345
  },
  "{\"sourceRoot\":\"C:\\\\Users\\\\27682\\\\Desktop\\\\Local_Projects\\\\Quality_Assurance_and_Testing_with_Chai\\\\Projects\\\\boilerplate-project-sudoku-solver\\\\controllers\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\27682\\\\Desktop\\\\Local_Projects\\\\Quality_Assurance_and_Testing_with_Chai\\\\Projects\\\\boilerplate-project-sudoku-solver\",\"filename\":\"C:\\\\Users\\\\27682\\\\Desktop\\\\Local_Projects\\\\Quality_Assurance_and_Testing_with_Chai\\\\Projects\\\\boilerplate-project-sudoku-solver\\\\controllers\\\\sudoku-solver.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test\",\"root\":\"C:\\\\Users\\\\27682\\\\Desktop\\\\Local_Projects\\\\Quality_Assurance_and_Testing_with_Chai\\\\Projects\\\\boilerplate-project-sudoku-solver\",\"plugins\":[{\"key\":\"proposal-numeric-separator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"NumericLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-logical-assignment-operators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.11.6:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\controllers\\",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver",
      "filename": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\controllers\\sudoku-solver.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "test",
      "root": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-numeric-separator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "NumericLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-logical-assignment-operators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\controllers\\sudoku-solver.js",
        "plugins": [
          "numericSeparator",
          "logicalAssignment",
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "exportNamespaceFrom",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\controllers\\sudoku-solver.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\controllers\\",
        "sourceFileName": "sudoku-solver.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar SudokuSolver = /*#__PURE__*/function () {\n  function SudokuSolver() {\n    _classCallCheck(this, SudokuSolver);\n  }\n\n  _createClass(SudokuSolver, [{\n    key: \"isSafe\",\n\n    /*\n    * isSafe function used to check if placement in a certain box\n    * is safe or not.  \n    */\n    value: function isSafe(puzzleString, row, column, value) {\n      // console.log('isSafe');\n      // Check row\n      for (var x = 0; x < 9; x++) {\n        if (puzzleString[row][x] === value) return false;\n      } // Check column\n\n\n      for (var _x = 0; _x < 9; _x++) {\n        if (puzzleString[_x][column] === value) return false;\n      } // Check 3x3 subgrid\n\n\n      var startRow = row - row % 3;\n      var startCol = column - column % 3;\n\n      for (var i = 0; i < 3; i++) {\n        for (var j = 0; j < 3; j++) {\n          if (puzzleString[i + startRow][j + startCol] === value) return false;\n        }\n      }\n\n      return true;\n    }\n    /**\n     * createBoard method takes a string and returns an array of the sudoku\n     * puzzle spread out.\n     * @param {*} puzzleString \n     * @returns board\n     */\n\n  }, {\n    key: \"createBoard\",\n    value: function createBoard(puzzleString) {\n      var board = [];\n      var index = 0;\n\n      for (var outerIndex = 0; outerIndex < 9; outerIndex++) {\n        var insideBoard = [];\n\n        for (var pushIndex = 0; pushIndex < 9; pushIndex++) {\n          if (puzzleString[index] == '.') {\n            insideBoard.push(puzzleString[index]);\n          } else {\n            insideBoard.push(parseInt(puzzleString[index]));\n          }\n\n          index++;\n        }\n\n        board.push(insideBoard);\n      }\n\n      return board;\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(puzzleString) {\n      var puzzleLength = puzzleString.length;\n\n      if (puzzleLength !== 81) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"checkRowPlacement\",\n    value: function checkRowPlacement(puzzleString, row, column, value) {\n      var Board = this.createBoard(puzzleString);\n      var clash = false; //  Loop through the columns to find clashes\n\n      for (var col = 0; col < 9; col++) {\n        if (col !== column) {\n          if (Board[row][col] === parseInt(value)) {\n            clash = true;\n            break;\n          }\n        }\n      }\n\n      return clash;\n    }\n  }, {\n    key: \"checkColPlacement\",\n    value: function checkColPlacement(puzzleString, row, column, value) {\n      var Board = this.createBoard(puzzleString);\n      var clash = false; //  Loop through the rows to find clashes\n\n      for (var rows = 0; rows < 9; rows++) {\n        if (rows !== row) {\n          if (Board[rows][column] === parseInt(value)) {\n            clash = true;\n            break;\n          }\n        }\n      }\n\n      return clash;\n    }\n  }, {\n    key: \"checkRegionPlacement\",\n    value: function checkRegionPlacement(puzzleString, row, column, value) {\n      var Board = this.createBoard(puzzleString);\n      var clash = false;\n      var subgrids = Array.from({\n        length: 9\n      }, function () {\n        return [];\n      });\n\n      for (var _row = 0; _row < 9; _row++) {\n        for (var col = 0; col < 9; col++) {\n          var subgridIndex = Math.floor(_row / 3) * 3 + Math.floor(col / 3);\n          subgrids[subgridIndex].push(Board[_row][col]);\n        }\n      }\n\n      var boxNumber = -1; // Find the box/ index to check in.\n\n      if (row < 3 && column < 3) {\n        boxNumber = 0;\n      } else if (row < 3 && column >= 3 && column < 6) {\n        boxNumber = 1;\n      } else if (row < 3 && column >= 6 && column < 9) {\n        boxNumber = 2;\n      } else if (row >= 3 && row < 6 && column < 3) {\n        boxNumber = 3;\n      } else if (row >= 3 && row < 6 && column >= 3 && column < 6) {\n        boxNumber = 4;\n      } else if (row >= 3 && row < 6 && column >= 6 && column < 9) {\n        boxNumber = 5;\n      } else if (row >= 6 && row < 9 && column < 3) {\n        boxNumber = 6;\n      } else if (row >= 6 && row < 9 && column >= 3 && column < 6) {\n        boxNumber = 7;\n      } else if (row >= 6 && row < 9 && column >= 6 && column < 9) {\n        boxNumber = 8;\n      } // Do the findings\n\n\n      for (var i = 0; i < subgrids[boxNumber].length; i++) {\n        if (subgrids[boxNumber][i] === parseInt(value)) {\n          clash = true;\n        }\n      }\n\n      return clash;\n    }\n  }, {\n    key: \"solvePuzzle\",\n    value: function solvePuzzle(Board, row, col) {\n      var N = 9;\n\n      if (row === N - 1 && col === N) {\n        return Board;\n      }\n\n      if (col === N) {\n        row++;\n        col = 0;\n      }\n\n      if (Board[row][col] != '.') {\n        return this.solvePuzzle(Board, row, col + 1);\n      }\n\n      for (var num = 1; num < 10; num++) {\n        if (this.isSafe(Board, row, col, num)) {\n          Board[row][col] = num;\n\n          if (this.solvePuzzle(Board, row, col + 1)) {\n            return Board;\n          }\n        }\n\n        Board[row][col] = '.';\n      }\n\n      return false;\n    }\n  }, {\n    key: \"solve\",\n    value: function solve(board) {\n      var solvedBoard = this.solvePuzzle(board, 0, 0);\n      var solved = true; // Check that it is solved.\n\n      for (var rows = 0; rows < 9; rows++) {\n        if (solvedBoard[rows].indexOf(\".\") !== -1) {\n          solved = false;\n        }\n      }\n\n      var stringSolution = \"\"; // Stringify the board\n\n      if (solved) {\n        stringSolution = solvedBoard.flat().join(\"\");\n      }\n\n      return stringSolution;\n    }\n  }]);\n\n  return SudokuSolver;\n}();\n\nmodule.exports = SudokuSolver;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "sudoku-solver.js"
      ],
      "names": [
        "SudokuSolver",
        "puzzleString",
        "row",
        "column",
        "value",
        "x",
        "startRow",
        "startCol",
        "i",
        "j",
        "board",
        "index",
        "outerIndex",
        "insideBoard",
        "pushIndex",
        "push",
        "parseInt",
        "puzzleLength",
        "length",
        "Board",
        "createBoard",
        "clash",
        "col",
        "rows",
        "subgrids",
        "Array",
        "from",
        "subgridIndex",
        "Math",
        "floor",
        "boxNumber",
        "N",
        "solvePuzzle",
        "num",
        "isSafe",
        "solvedBoard",
        "solved",
        "indexOf",
        "stringSolution",
        "flat",
        "join",
        "module",
        "exports"
      ],
      "mappings": "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",
      "sourceRoot": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\controllers\\",
      "sourcesContent": [
        "class SudokuSolver {\n  /*\n  * isSafe function used to check if placement in a certain box\n  * is safe or not.  \n  */\n  isSafe(puzzleString, row, column, value){\n  // console.log('isSafe');\n    // Check row\n  for (let x = 0; x < 9; x++) {\n    if (puzzleString[row][x] === value) return false;\n  }\n\n  // Check column\n  for (let x = 0; x < 9; x++) {\n    if (puzzleString[x][column] === value) return false;\n  }\n\n  // Check 3x3 subgrid\n  const startRow = row - (row % 3);\n  const startCol = column - (column % 3);\n\n  for (let i = 0; i < 3; i++) {\n    for (let j = 0; j < 3; j++) {\n      if (puzzleString[i + startRow][j + startCol] === value) return false;\n    }\n  }\n\n  return true;\n  }\n\n  \n  /**\n   * createBoard method takes a string and returns an array of the sudoku\n   * puzzle spread out.\n   * @param {*} puzzleString \n   * @returns board\n   */\n\n  createBoard(puzzleString){\n    let board = [];\n    let index = 0;\n\n    for ( let outerIndex = 0; outerIndex < 9; outerIndex++ ){\n      let insideBoard = [];\n      for( let pushIndex = 0; pushIndex < 9; pushIndex++)\n      {\n        if (puzzleString[index] == '.') {\n          insideBoard.push(puzzleString[index]);\n        } else {\n          insideBoard.push(parseInt(puzzleString[index]));\n        }\n        index++;\n      }\n\n      board.push(insideBoard);\n    }\n    return board;\n  }\n\n  validate(puzzleString) {\n    const puzzleLength = puzzleString.length;\n    if (puzzleLength !== 81){\n      return false;\n    }\n    return true;\n  }\n\n  checkRowPlacement(puzzleString, row, column, value) {\n    let Board = this.createBoard(puzzleString);\n    let clash = false;\n    //  Loop through the columns to find clashes\n    for (let col =0; col < 9; col++){\n      if (col !== column){\n        if(Board[row][col] === parseInt(value)){\n          clash = true;\n          break;\n        }\n      }\n    }\n    return clash;\n\n  }\n\n  checkColPlacement(puzzleString, row, column, value) {\n    let Board = this.createBoard(puzzleString);\n    let clash = false;\n    //  Loop through the rows to find clashes\n    for (let rows =0; rows < 9; rows++){\n      if (rows !== row){\n        if(Board[rows][column] === parseInt(value)){\n          clash = true;\n          break;\n        }\n      }\n    }\n    return clash;\n  }\n\n  checkRegionPlacement(puzzleString, row, column, value) {\n    let Board = this.createBoard(puzzleString);\n    let clash = false;\n    let subgrids = Array.from({ length: 9 }, () => []);\n\n  for (let row = 0; row < 9; row++) {\n    for (let col = 0; col < 9; col++) {\n      const subgridIndex = Math.floor(row / 3) * 3 + Math.floor(col / 3);\n      subgrids[subgridIndex].push(Board[row][col]);\n    }\n  }\n  let boxNumber = -1;\n\n  // Find the box/ index to check in.\n  if (row < 3 && column < 3){\n    boxNumber = 0;\n  } else if ( row < 3 && (column >= 3 && column < 6)){\n    boxNumber = 1;\n  } else if (row < 3 && (column >=6 && column < 9)){\n    boxNumber = 2;\n  } else if ((row >=3 && row < 6) && column < 3){\n    boxNumber = 3;\n  } else if ((row >=3 && row < 6) && (column >= 3 && column < 6)){\n    boxNumber = 4;\n  } else if ((row >= 3 && row < 6) && (column >= 6 && column < 9)){\n    boxNumber = 5;\n  } else if ((row >=6 && row < 9) && column < 3) {\n    boxNumber = 6;\n  } else if ((row >= 6 && row < 9) && (column >= 3 && column < 6)){\n    boxNumber = 7;\n  } else if ((row >= 6 && row < 9) && (column >=6 && column < 9)){\n    boxNumber = 8;\n  }\n\n  // Do the findings\n  for (let i = 0; i < subgrids[boxNumber].length; i++){\n    if(subgrids[boxNumber][i] === parseInt(value)){\n      clash = true;\n    }\n  }\n  return clash;\n\n  }\nsolvePuzzle(Board, row, col){\n  const N = 9;\n\n  if ( row === N - 1 && col === N ){\n    return Board;\n  }\n  if ( col === N ) {\n    row++;\n    col = 0;\n  }\n\n  if ( Board[row][col] != '.' ){\n    return this.solvePuzzle(Board, row, col + 1);\n  }\n\n  for ( let num = 1; num < 10; num++ ){\n    if( this.isSafe(Board, row, col, num) ){\n      Board[row][col] = num;\n\n      if (this.solvePuzzle(Board, row, col + 1)){\n        return Board;\n      }\n    }\n    Board[row][col] = '.';\n  }\n  return false;\n}\nsolve(board){\n let solvedBoard = this.solvePuzzle(board, 0, 0);\n let solved = true;\n // Check that it is solved.\n for ( let rows = 0; rows < 9; rows++ ){\n  if ( solvedBoard[rows].indexOf(\".\") !== -1 ){\n    solved = false;\n  }\n }\n let stringSolution = \"\";\n // Stringify the board\n if ( solved ){\n    stringSolution = solvedBoard.flat().join(\"\");\n }\n return stringSolution;\n}\n\n}\n\nmodule.exports = SudokuSolver;\n\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1749070385079
  },
  "{\"sourceRoot\":\"C:\\\\Users\\\\27682\\\\Desktop\\\\Local_Projects\\\\Quality_Assurance_and_Testing_with_Chai\\\\Projects\\\\boilerplate-project-sudoku-solver\\\\tests\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\27682\\\\Desktop\\\\Local_Projects\\\\Quality_Assurance_and_Testing_with_Chai\\\\Projects\\\\boilerplate-project-sudoku-solver\",\"filename\":\"C:\\\\Users\\\\27682\\\\Desktop\\\\Local_Projects\\\\Quality_Assurance_and_Testing_with_Chai\\\\Projects\\\\boilerplate-project-sudoku-solver\\\\tests\\\\2_functional-tests.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test\",\"root\":\"C:\\\\Users\\\\27682\\\\Desktop\\\\Local_Projects\\\\Quality_Assurance_and_Testing_with_Chai\\\\Projects\\\\boilerplate-project-sudoku-solver\",\"plugins\":[{\"key\":\"proposal-numeric-separator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"NumericLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-logical-assignment-operators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.11.6:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\tests\\",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver",
      "filename": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\tests\\2_functional-tests.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "test",
      "root": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-numeric-separator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "NumericLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-logical-assignment-operators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\tests\\2_functional-tests.js",
        "plugins": [
          "numericSeparator",
          "logicalAssignment",
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "exportNamespaceFrom",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\tests\\2_functional-tests.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\tests\\",
        "sourceFileName": "2_functional-tests.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar chai = require(\"chai\");\n\nvar chaiHttp = require('chai-http');\n\nvar assert = chai.assert;\n\nvar server = require('../server');\n\nchai.use(chaiHttp);\nsuite('Functional Tests', function () {});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIjJfZnVuY3Rpb25hbC10ZXN0cy5qcyJdLCJuYW1lcyI6WyJjaGFpIiwicmVxdWlyZSIsImNoYWlIdHRwIiwiYXNzZXJ0Iiwic2VydmVyIiwidXNlIiwic3VpdGUiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxJQUFNQyxRQUFRLEdBQUdELE9BQU8sQ0FBQyxXQUFELENBQXhCOztBQUNBLElBQU1FLE1BQU0sR0FBR0gsSUFBSSxDQUFDRyxNQUFwQjs7QUFDQSxJQUFNQyxNQUFNLEdBQUdILE9BQU8sQ0FBQyxXQUFELENBQXRCOztBQUVBRCxJQUFJLENBQUNLLEdBQUwsQ0FBU0gsUUFBVDtBQUVBSSxLQUFLLENBQUMsa0JBQUQsRUFBcUIsWUFBTSxDQUUvQixDQUZJLENBQUwiLCJzb3VyY2VSb290IjoiQzpcXFVzZXJzXFwyNzY4MlxcRGVza3RvcFxcTG9jYWxfUHJvamVjdHNcXFF1YWxpdHlfQXNzdXJhbmNlX2FuZF9UZXN0aW5nX3dpdGhfQ2hhaVxcUHJvamVjdHNcXGJvaWxlcnBsYXRlLXByb2plY3Qtc3Vkb2t1LXNvbHZlclxcdGVzdHNcXCIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNoYWkgPSByZXF1aXJlKFwiY2hhaVwiKTtcbmNvbnN0IGNoYWlIdHRwID0gcmVxdWlyZSgnY2hhaS1odHRwJyk7XG5jb25zdCBhc3NlcnQgPSBjaGFpLmFzc2VydDtcbmNvbnN0IHNlcnZlciA9IHJlcXVpcmUoJy4uL3NlcnZlcicpO1xuXG5jaGFpLnVzZShjaGFpSHR0cCk7XG5cbnN1aXRlKCdGdW5jdGlvbmFsIFRlc3RzJywgKCkgPT4ge1xuXG59KTtcblxuIl19",
    "map": {
      "version": 3,
      "sources": [
        "2_functional-tests.js"
      ],
      "names": [
        "chai",
        "require",
        "chaiHttp",
        "assert",
        "server",
        "use",
        "suite"
      ],
      "mappings": ";;AAAA,IAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,WAAD,CAAxB;;AACA,IAAME,MAAM,GAAGH,IAAI,CAACG,MAApB;;AACA,IAAMC,MAAM,GAAGH,OAAO,CAAC,WAAD,CAAtB;;AAEAD,IAAI,CAACK,GAAL,CAASH,QAAT;AAEAI,KAAK,CAAC,kBAAD,EAAqB,YAAM,CAE/B,CAFI,CAAL",
      "sourceRoot": "C:\\Users\\27682\\Desktop\\Local_Projects\\Quality_Assurance_and_Testing_with_Chai\\Projects\\boilerplate-project-sudoku-solver\\tests\\",
      "sourcesContent": [
        "const chai = require(\"chai\");\nconst chaiHttp = require('chai-http');\nconst assert = chai.assert;\nconst server = require('../server');\n\nchai.use(chaiHttp);\n\nsuite('Functional Tests', () => {\n\n});\n\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1746621611440
  }
}